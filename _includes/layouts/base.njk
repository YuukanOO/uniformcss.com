<!doctype html>
<html lang="en" class="antialiased bg-white font-sans scroll-smooth">
<head>
  <title>{{ metadata.sitename }}{{ title or metadata.title }}</title>

  <!-- Page Meta -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
  <meta name="description" content="{{ description or metadata.description }}">

  <!-- Social Media Open Graph -->
  <meta property="og:title" content="{{ metadata.sitename }}{{ title or metadata.title }}" />
  <meta property="og:url" content="{{ permalink | url }}" />
  <meta property="og:type" content="website" />
  <meta property="og:description" content="{{ description or metadata.description }}" />
  <meta property="og:image" content="{{ '/assets/screenshot.png' | url }}" />

  <!-- Twitter -->
  <meta property="twitter:card" content="summary_large_image" />
  <meta name="twitter:site" content="@UniformCSS" />
  <meta name="twitter:creator" content="@UniformCSS" />
  <meta property="twitter:url" content="{{ permalink | url }}" />
  <meta property="twitter:title" content="{{ metadata.sitename }}{{ title or metadata.title }}" />
  <meta property="twitter:description" content="{{ description or metadata.description }}" />
  <meta property="twitter:image" content="{{ '/assets/screenshot.png' | url }}" />

  <link rel="alternate" href="{{ metadata.feed.path | url }}" type="application/atom+xml" title="{{ metadata.title }}">
  <link rel="alternate" href="{{ metadata.jsonfeed.path | url }}" type="application/json" title="{{ metadata.title }}">

  <!-- Icons -->
  <link rel="icon" href="{{ '/assets/favicon-16x16.png' | url }}" sizes="16x16" />
  <link rel="icon" href="{{ '/assets/favicon-32x32.png' | url }}" sizes="32x32" />
  <link rel="icon" href="{{ '/assets/favicon-96x96.png' | url }}" sizes="96x96" />
  <link rel="apple-touch-icon" sizes="180x180" href="{{ '/assets/apple-touch-icon.png' | url }}" />
  <link rel="manifest" href="{{ '/assets/manifest.json' | url }}" />

  <!-- Styles -->
  {% if site.environment === 'production' %}
    <!-- INLINE CSS-->
  {% else %}
    <link rel="stylesheet" href="{{ '/assets/css/styles.css' | url }}">
  {% endif %}

  <!-- SplitBee Analytics -->
  <script async src="https://cdn.splitbee.io/sb.js"></script>

  <!-- Fonts -->
  <style>
  /* manrope-300 - latin */
  @font-face {
    font-family: 'Manrope';
    font-style: normal;
    font-weight: 300;
    font-display: swap;
    src: local(''),
        url('{{ '/assets/fonts/manrope/Manrope-Light.woff2' | url }}') format('woff2'), /* Chrome 26+, Opera 23+, Firefox 39+ */
        url('{{ '/assets/fonts/manrope/Manrope-Light.woff' | url }}') format('woff'); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */
  }
  /* manrope-regular - latin */
  @font-face {
    font-family: 'Manrope';
    font-style: normal;
    font-weight: 400;
    font-display: swap;
    src: local(''),
        url('{{ '/assets/fonts/manrope/Manrope-Regular.woff2' | url }}') format('woff2'), /* Chrome 26+, Opera 23+, Firefox 39+ */
        url('{{ '/assets/fonts/manrope/Manrope-Regular.woff' | url }}') format('woff'); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */
  }
  /* manrope-500 - latin */
  @font-face {
    font-family: 'Manrope';
    font-style: normal;
    font-weight: 500;
    font-display: swap;
    src: local(''),
        url('{{ '/assets/fonts/manrope/Manrope-Medium.woff2' | url }}') format('woff2'), /* Chrome 26+, Opera 23+, Firefox 39+ */
        url('{{ '/assets/fonts/manrope/Manrope-Medium.woff' | url }}') format('woff'); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */
  }
  /* manrope-600 - latin */
  @font-face {
    font-family: 'Manrope';
    font-style: normal;
    font-weight: 600;
    font-display: swap;
    src: local(''),
        url('{{ '/assets/fonts/manrope/Manrope-Bold.woff2' | url }}') format('woff2'), /* Chrome 26+, Opera 23+, Firefox 39+ */
        url('{{ '/assets/fonts/manrope/Manrope-Bold.woff' | url }}') format('woff'); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */
  }
  /* manrope-800 - latin */
  @font-face {
    font-family: 'Manrope';
    font-style: normal;
    font-weight: 800;
    font-display: swap;
    src: local(''),
        url('{{ '/assets/fonts/manrope/Manrope-ExtraBold.woff2' | url }}') format('woff2'), /* Chrome 26+, Opera 23+, Firefox 39+ */
        url('{{ '/assets/fonts/manrope/Manrope-ExtraBold.woff' | url }}') format('woff'); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */
  }
  </style>
</head>
<body data-barba="wrapper">
  {{ content | safe }}

  <script src="https://cdn.jsdelivr.net/npm/@barba/core"></script>
  <script src="https://code.jquery.com/jquery-3.4.1.min.js"
  integrity="sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=" crossorigin="anonymous"></script>
  

<script>

barba.init({
  transitions: [{
    name: 'default-transition',
    leave() {
      // create your stunning leave animation here
    },
    enter() {
      // create your amazing enter animation here
      window.scrollTo(0, 64);   
    }
  }]
})

$(document).ready(function () {
  $('.js-home-dark-switcher').change(function(){
    $('body').toggleClass('is-dark');
  });

  $(document).on('input change', '.js-hue-slider', function() {
    let hue = $(this).val();
    $('.js-theme-demo').get(0).style.setProperty("--primary-hue", hue);
  });

  $(document).on('input change', '.js-sat-slider', function() {
    let sat = $(this).val() * 1;
    $('.js-theme-demo').get(0).style.setProperty("--primary-sat", sat + '%');
  });

  $(document).on('input change', '.js-ltn-slider', function() {
    let ltn = $(this).val() * 1;
    $('.js-theme-demo').get(0).style.setProperty("--primary-ltn", ltn + '%');
  });

 

  // Change pages on mobile
  $('.js-select-url').on('change', function () {
    console.log("changed");
    let url = $(this).val(); // get selected value
    if (url) { // require a URL
      window.location = '/get-started/' + url; // redirect
    }
    return false;
  });

  $('.js-glossary-select-url').on('change', function () {
    console.log("changed");
    let url = $(this).val(); // get selected value
    if (url) { // require a URL
      window.location = '/glossary/#' + url; // redirect
    }
    return false;
  });

  $('.js-btn-reveal-colors').click(function() {
    $(this).parent().hide();
    $('.js-colors').fadeIn();
  });

  $('.js-btn-reveal-sizes').click(function() {
    $(this).parent().hide();
    $('.js-sizes').fadeIn();
  });


  // homepage Image Compare Container
  var dragging = false,
      scrolling = false,
      resizing = false;
  // cache jQuery objects
  var imageComparisonContainers = $('.cd-image-container');
  // check if the .cd-image-container is in the viewport 
  // if yes, animate it
  checkPosition(imageComparisonContainers);
  $(window).on('scroll', function ()
  {
    if (!scrolling)
    {
      scrolling = true;
      (!window.requestAnimationFrame) ?
      setTimeout(function ()
      {
        checkPosition(imageComparisonContainers);
      }, 100): requestAnimationFrame(function ()
      {
        checkPosition(imageComparisonContainers);
      });
    }
  });

  // make the .cd-handle element draggable and modify .cd-resize-img width according to its position
  imageComparisonContainers.each(function ()
  {
    var actual = $(this);
    drags(actual.find('.cd-handle'), actual.find('.cd-resize-img'), actual, actual.find('.cd-image-label[data-type="original"]'), actual.find('.cd-image-label[data-type="modified"]'));
  });

  // upadate images label visibility
  $(window).on('resize', function ()
  {
    if (!resizing)
    {
      resizing = true;
      (!window.requestAnimationFrame) ?
      setTimeout(function ()
      {
        checkLabel(imageComparisonContainers);
      }, 100): requestAnimationFrame(function ()
      {
        checkLabel(imageComparisonContainers);
      });
    }
  });

  function checkPosition(container)
  {
    container.each(function ()
    {
      var actualContainer = $(this);
      if ($(window).scrollTop() + $(window).height() * 0.5 > actualContainer.offset().top)
      {
        actualContainer.addClass('is-visible');
      }
    });

    scrolling = false;
  }

  function checkLabel(container)
  {
    container.each(function ()
    {
      var actual = $(this);
      updateLabel(actual.find('.cd-image-label[data-type="modified"]'), actual.find('.cd-resize-img'), 'left');
      updateLabel(actual.find('.cd-image-label[data-type="original"]'), actual.find('.cd-resize-img'), 'right');
    });

    resizing = false;
  }

  // draggable funtionality - credits to http://css-tricks.com/snippets/jquery/draggable-without-jquery-ui/
  function drags(dragElement, resizeElement, container, labelContainer, labelResizeElement)
  {
    dragElement.on("mousedown vmousedown", function (e)
    {
      dragElement.addClass('draggable');
      resizeElement.addClass('resizable');

      var dragWidth = dragElement.outerWidth(),
        xPosition = dragElement.offset().left + dragWidth - e.pageX,
        containerOffset = container.offset().left,
        containerWidth = container.outerWidth(),
        minLeft = containerOffset + 10,
        maxLeft = containerOffset + containerWidth - dragWidth - 10;

      dragElement.parents().on("mousemove vmousemove", function (e)
      {
        if (!dragging)
        {
          dragging = true;
          (!window.requestAnimationFrame) ?
          setTimeout(function ()
          {
            animateDraggedHandle(e, xPosition, dragWidth, minLeft, maxLeft, containerOffset, containerWidth, resizeElement, labelContainer, labelResizeElement);
          }, 100): requestAnimationFrame(function ()
          {
            animateDraggedHandle(e, xPosition, dragWidth, minLeft, maxLeft, containerOffset, containerWidth, resizeElement, labelContainer, labelResizeElement);
          });
        }
      }).on("mouseup vmouseup", function (e)
      {
        dragElement.removeClass('draggable');
        resizeElement.removeClass('resizable');
      });
      e.preventDefault();
    }).on("mouseup vmouseup", function (e)
    {
      dragElement.removeClass('draggable');
      resizeElement.removeClass('resizable');
    });
  }

  function animateDraggedHandle(e, xPosition, dragWidth, minLeft, maxLeft, containerOffset, containerWidth, resizeElement, labelContainer, labelResizeElement)
  {
    var leftValue = e.pageX + xPosition - dragWidth;
    // constrain the draggable element to move inside his container
    if (leftValue < minLeft)
    {
      leftValue = minLeft;
    }
    else if (leftValue > maxLeft)
    {
      leftValue = maxLeft;
    }

    var widthValue = (leftValue + dragWidth / 2 - containerOffset) * 100 / containerWidth + '%';

    $('.draggable').css('left', widthValue).on("mouseup vmouseup", function ()
    {
      $(this).removeClass('draggable');
      resizeElement.removeClass('resizable');
    });

    $('.resizable').css('width', widthValue);

    updateLabel(labelResizeElement, resizeElement, 'left');
    updateLabel(labelContainer, resizeElement, 'right');
    dragging = false;
  }

  function updateLabel(label, resizeElement, position)
  {
    if (position == 'left')
    {
      (label.offset().left + label.outerWidth() < resizeElement.offset().left + resizeElement.outerWidth()) ? label.removeClass('is-hidden'): label.addClass('is-hidden');
    }
    else
    {
      (label.offset().left > resizeElement.offset().left + resizeElement.outerWidth()) ? label.removeClass('is-hidden'): label.addClass('is-hidden');
    }
  }
});
</script>
</body>
</html>
