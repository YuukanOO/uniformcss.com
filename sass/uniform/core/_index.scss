@use "sass:map";
@use "uniform/config" as *;
@use "uniform/config/user-settings" as *;



// CONFIG COMPILER
// ============================================================

$config: map.deep-merge($default-settings, $user-settings);

// PRIVATE FUNCTIONS
// ============================================================

// PX TO REM FUNCTION
@function rem($size-in-pixel) {
  $remSize: $size-in-pixel / 16;
  @return #{$remSize}rem;
}

// MULTIPLE MAP MERGE FUNCTION
@function merge($maps...) {
  $collection: ();
  @each $map in $maps {
    $collection: map.merge($collection, $map);
  }
  @return $collection;
}

// DEEP MAP GET FUNCTION
@function get($map, $keys...) {
  @each $key in $keys {
    $map: map.get($map, $key);
  }
  @return $map;
}

// VARIABLIZE MAP FUNCTION (CSS CUSTOM PROPERTIES)
@function variablize-map($map, $keyword) {
  $variablized-map: ();
  @each $key, $value in $map {
    $delimiter: if($keyword == '', '', '-');
    $map: (
      $key: var(--#{$keyword}#{$delimiter}#{$key}),
    );
    $variablized-map: merge($variablized-map, $map);
  }

  @return $variablized-map;
}

// VARIABLIZE SCREENS
@function name-screens($screens) {
  $named-screens: ();
  @each $key, $value in $screens {
    $screens: (
      screen-#{$key}: $value,
    );
    $named-screens: merge($named-screens, $screens);
  }
  @return $named-screens;
}



// CORE BREAKPOINTS
// ============================================================

@function screen($screen) {
  @if (map.get($all-config, screens, $screen)) {
    $result: map.get($all-config, screens, $screen);
    @return $result;
  } @else {
    @error "[#{$screen}] does not exist";
  }
}

@function screens() {
  $result: map.get($all-config, screens);
  @return $result;
}



// CORE PSEUDOS
// ============================================================


// @function build-settings() {
//   $result: $build-settings;
//   @return $result;
// }

// @function pseudos() {
//   $result: $pseudos;
//   @return $result;
// }



// $gradients: ();

// $var-colors: variablize-map($colors, '');
// $var-gradients: variablize-map($gradients, '');

// $fills: merge($colors, $gradients);
// $var-fills: variablize-map($fills, '');

// @function color($color) {
//   $variablize: map.get($build-settings, build-settings, variablize);
//   $headless: map.get($build-settings, build-settings, headless);
//   @if (map.get($colors, $color)) {
//     $result: ();
    
//     @if ($variablize == true) {
//       $result: map.get($var-colors, $color);
//     } @else {
//       $result: map.get($colors, $color);
//     }
//     @return $result;
//   } @else {
//     @if ($headless == true) {
//       $result: var(--#{$color});
//       @return $result;
//     } @else {
//       @error "[#{$color}] does not exist";
//     }
//   }
// }

// @function colors() {
//   $variablize = map.get($build-settings, build-settings, variablize);
//   $result: ();
//   @if ($variablize == true) {
//     $result: $var-colors;
//   } @else {
//     $result: $all-colors;
//   }
//   @return $result;
// }

// @function gradient($gradient) {
//   @if (map.get($all-gradients, $gradient)) {
//     $result: ();
//     @if ($variablize == true) {
//       $result: map.get($var-gradients, $gradient);
//     } @else {
//       $result: map.get($all-gradients, $gradient);
//     }
//     @return $result;
//   } @else {
//     @if ($headless == true) {
//       $result: var(--#{$gradient});
//       @return $result;
//     } @else {
//       @error "[#{$gradient}] does not exist";
//     }
//   }
// }

// @function gradients() {
//   $result: ();
//   @if ($variablize == true) {
//     $result: $var-gradients;
//   } @else {
//     $result: $all-gradients;
//   }
//   @return $result;
// }

// @function fill($fill) {
//   @if (map.get($fills, $fill)) {
//     $result: ();
//     @if ($variablize == true) {
//       $result: map.get($var-fills, $fill);
//     } @else {
//       $result: map.get($fills, $fill);
//     }
//     @return $result;
//   } @else {
//     @if ($headless == true) {
//       $result: var(--#{$fill});
//       @return $result;
//     } @else {
//       @error "[#{$fill}] does not exist";
//     }
//   }
// }

// @function fills() {
//   $result: ();
//   @if ($variablize == true) {
//     $result: $var-fills;
//   } @else {
//     $result: $fills;
//   }
//   @return $result;
// }

// @function positive-size($positive-size) {
//   @if (map.get($all-positive-sizes, $positive-size)) {
//     $result: ();
//     @if ($variablize == true) {
//       $result: map.get($var-positive-sizes, $positive-size);
//     } @else {
//       $result: map.get($all-positive-sizes, $positive-size);
//     }
//     @return $result;
//   } @else {
//     @if ($headless == true) {
//       $result: var(--size-#{$positive-size});
//       @return $result;
//     } @else {
//       @error "[#{$positive-size}] does not exist";
//     }
//   }
// }

// @function positive-sizes() {
//   $result: ();
//   @if ($variablize == true) {
//     $result: $var-positive-sizes;
//   } @else {
//     $result: $all-positive-sizes;
//   }
//   @return $result;
// }

// @function negative-size($negative-size) {
//   @if (map.get($all-negative-sizes, $negative-size)) {
//     $result: ();
//     @if ($variablize == true) {
//       $result: map.get($var-negative-sizes, $negative-size);
//     } @else {
//       $result: map.get($all-negative-sizes, $negative-size);
//     }
//     @return $result;
//   } @else {
//     @if ($headless == true) {
//       $result: var(--size-#{$negative-size});
//       @return $result;
//     } @else {
//       @error "[#{$negative-size}] does not exist";
//     }
//   }
// }

// @function negative-sizes() {
//   $result: ();
//   @if ($variablize == true) {
//     $result: $var-negative-sizes;
//   } @else {
//     $result: $all-negative-sizes;
//   }
//   @return $result;
// }

// @function size($size, $sizes...) {
//   $result: ();
//   @if (map.has-key($all-sizes, $size)) {
//     @if ($variablize == true) {
//       $result: map.get($var-all-sizes, $size);
//     } @else {
//       $result: map.get($all-sizes, $size);
//     }
//   } @else {
//     $result: list.append($result, $size);
//   }
//   @each $size in $sizes {
//     $value: '';
//     @if (map.has-key($all-sizes, $size)) {
//       @if ($variablize == true) {
//         $value: map.get($var-all-sizes, $size);
//       } @else {
//         $value: map.get($all-sizes, $size);
//       }
//       $result: list.append($result, $value);
//     } @else {
//       $result: list.append($result, $size);
//     }
//   }
//   @return $result;
// }

// @function sizes() {
//   $result: ();
//   @if ($variablize == true) {
//     $result: $var-all-sizes;
//   } @else {
//     $result: $all-sizes;
//   }
//   @return $result;
// }

// $shadows: ();

// $all-shadows: merge($shadows, $shadows);
// $var-shadows: variablize-map($all-shadows, 'shadow');

// @function shadow($shadow) {
//   @if (map.get($all-shadows, $shadow)) {
//     $result: ();
//     @if ($variablize == true) {
//       $result: map.get($var-shadows, $shadow);
//     } @else {
//       $result: map.get($all-shadows, $shadow);
//     }
//     @return $result;
//   } @else {
//     @if ($headless == true) {
//       $result: var(--shadow-#{$shadow});
//       @return $result;
//     } @else {
//       @error "[#{$shadow}] does not exist";
//     }
//   }
// }

// @function shadows() {
//   $result: ();
//   @if ($variablize == true) {
//     $result: $var-shadows;
//   } @else {
//     $result: $all-shadows;
//   }
//   @return $result;
// }







// $negative-sizes: ();

// $all-positive-sizes: merge($positive-sizes, $positive-sizes);
// $var-positive-sizes: variablize-map($all-positive-sizes, 'size');

// $all-negative-sizes: merge($negative-sizes, $negative-sizes);
// $var-negative-sizes: variablize-map($all-negative-sizes, 'size');

// $all-sizes: merge($positive-sizes, $negative-sizes, $positive-sizes, $negative-sizes);
// $var-all-sizes: variablize-map($all-sizes, 'size');








// $trackings: ();

// $all-font-families: merge($font-families, $font-families);
// $var-font-families: variablize-map($all-font-families, 'font');
// $all-font-sizes: merge($font-sizes, $font-sizes);
// $var-font-sizes: variablize-map($all-font-sizes, 'font');
// $all-leadings: merge($leadings, $leadings);
// $var-leadings: variablize-map($all-leadings, 'leading');
// $all-trackings: merge($trackings, $trackings);
// $var-trackings: variablize-map($all-trackings, 'tracking');

// @function font-family($font-family) {
//   @if (map.get($all-font-families, $font-family)) {
//     $result: ();
//     @if ($variablize == true) {
//       $result: map.get($var-font-families, $font-family);
//     } @else {
//       $result: map.get($all-font-families, $font-family);
//     }
//     @return $result;
//   } @else {
//     @if ($headless == true) {
//       $result: var(--font-family-#{$font-family});
//       @return $result;
//     } @else {
//       @error "[#{$font-family}] does not exist";
//     }
//   }
// }

// @function font-families() {
//   $result: ();
//   @if ($variablize == true) {
//     $result: $var-font-families;
//   } @else {
//     $result: $all-font-families;
//   }
//   @return $result;
// }

// @function font-size($font-size) {
//   @if (map.get($all-font-sizes, $font-size)) {
//     $result: ();
//     @if ($variablize == true) {
//       $result: map.get($var-font-sizes, $font-size);
//     } @else {
//       $result: map.get($all-font-sizes, $font-size);
//     }
//     @return $result;
//   } @else {
//     @if ($headless == true) {
//       $result: var(--font-size-#{$font-size});
//       @return $result;
//     } @else {
//       @error "[#{$font-size}] does not exist";
//     }
//   }
// }

// @function font-sizes() {
//   $result: ();
//   @if ($variablize == true) {
//     $result: $var-font-sizes;
//   } @else {
//     $result: $all-font-sizes;
//   }
//   @return $result;
// }

// @function leading($leading) {
//   @if (map.get($all-leadings, $leading)) {
//     $result: ();
//     @if ($variablize == true) {
//       $result: map.get($var-leadings, $leading);
//     } @else {
//       $result: map.get($all-leadings, $leading);
//     }
//     @return $result;
//   } @else {
//     @if ($headless == true) {
//       $result: var(--leading-#{$leading});
//       @return $result;
//     } @else {
//       @error "[#{$leading}] does not exist";
//     }
//   }
// }

// @function leadings() {
//   $result: ();
//   @if ($variablize == true) {
//     $result: $var-leadings;
//   } @else {
//     $result: $all-leadings;
//   }
//   @return $result;
// }

// @function tracking($tracking) {
//   @if (map.get($all-trackings, $tracking)) {
//     $result: ();
//     @if ($variablize == true) {
//       $result: map.get($var-trackings, $tracking);
//     } @else {
//       $result: map.get($all-trackings, $tracking);
//     }
//     @return $result;
//   } @else {
//     @if ($headless == true) {
//       $result: var(--tracking-#{$tracking});
//       @return $result;
//     } @else {
//       @error "[#{$tracking}] does not exist";
//     }
//   }
// }

// @function trackings() {
//   $result: ();
//   @if ($variablize == true) {
//     $result: $var-trackings;
//   } @else {
//     $result: $all-trackings;
//   }
//   @return $result;
// }

// $radiuses: ();
// $all-radiuses: merge($radiuses, $radiuses);
// $var-radiuses: variablize-map($all-radiuses, 'radius');

// @function radius($radius) {
//   @if (map.get($all-radiuses, $radius)) {
//     $result: ();
//     @if ($variablize == true) {
//       $result: map.get($var-radiuses, $radius);
//     } @else {
//       $result: map.get($all-radiuses, $radius);
//     }
//     @return $result;
//   } @else {
//     @if ($headless == true) {
//       $result: var(--radius-#{$radius});
//       @return $result;
//     } @else {
//       @error "[#{$radius}] does not exist";
//     }
//   }
// }

// @function radiuses() {
//   $result: ();
//   @if ($variablize == true) {
//     $result: $var-radiuses;
//   } @else {
//     $result: $all-radiuses;
//   }
//   @return $result;
// }

