@use "sass:map";
@use "sass:list";
@use "sass:string";
@use "sass:meta";
/*! UniformCSS v1.0.0 | MIT License | github.com/ThinkUniform/UniformCSS */

// USER CONFIG
// ============================================================

$config: (
  
) !default;


// DEFAULT CONFIG
// ============================================================

@function rem($size-in-pixel) {
  $remSize: $size-in-pixel / 16;
  @return #{$remSize}rem;
}

@function escape($any) {
  $escape-chars: (
    "!",
    // """,
    "#",
    "$",
    "%",
    "&",
    "'",
    "(",
    ")",
    "*",
    "+",
    ",",
    // "-",
    ".",
    "/",
    ":",
    ";",
    "<",
    "=",
    ">",
    "?",
    "@",
    "[",
    // "\",
    "]",
    "^",
    "`",
    "{",
    "|",
    "}",
    "~",
  );

	$string: "" + $any;
	$escaped-string: "";
	@for $x from 1 through string.length($string) {
		$character: string.slice($string, $x, $x);
		@if list.index($escape-chars, $character) {
			// NOTE: `"\\..."` must be quoted.
			$escaped-string: $escaped-string + "\\"+ $character;
		} @else {
			$escaped-string: $escaped-string + $character;
		}
	}
	@return $escaped-string;
}

@function string-split($string, $separator) {
  // empty array/list
  $split-array: ();
  // first index of separator in string
  $index : string.index($string, $separator);
  // loop through string
  @while $index != null {
    // get the substring from the first character to the separator
    $item: string.slice($string, 1, $index - 1);
    // push item to array
    $split-array: append($split-array, $item);
    // remove item and separator from string
    $string: string.slice($string, $index + 1);
    // find new index of separator
    $index : string.index($string, $separator);
  }
  // add the remaining string to list (the last item)
  $split-array: append($split-array, $string);

  @return $split-array;
}

$default-config: (
  important: false,
  prefix: null,
  delimiter: '-',
  pseudo-delimiter: '.',
  screen-delimiter: '.',

  headless: false,
  placeholders: false,
  dark-mode: false,

  exclude: (),

  include: (),

  screens: (
    sm: 768px,
    md: 1024px,
    lg: 1280px,
    xl: 1536px,
  ),

  pseudos: (
    first: ':first-child',
    last: ':last-child',
    first-type: ':first-of-type',
    last-type: ':last-of-type',
    odd: ':nth-child(odd)',
    even: ':nth-child(even)',
    hover: ':hover',
    active: ':active',
    visited: ':visited',
    focus: ':focus',
    disabled: ':disabled',
    empty: ':empty',
    focus-within: ':focus-within',
    group-hover: ':group-hover',
    group-focus: ':group-focus',
  ),

  tint-levels: (
    tint-100: 55.24%,
    tint-200: 60.46%,
    tint-300: 65.68%,
    tint-400: 70.9%,
    tint-500: 76.12%,
    tint-600: 81.34%,
    tint-700: 86.56%,
    tint-800: 91.78%,
    tint-900: 97%,
  ),

  shade-levels: (
    shade-100: 44.76%,
    shade-200: 39.54%,
    shade-300: 34.32%,
    shade-400: 29.1%,
    shade-500: 23.88%,
    shade-600: 18.66%,
    shade-700: 13.44%,
    shade-800: 8.22%,
    shade-900: 3%,
  ),

  opacity-levels: (
    opacity-0: 0,
    opacity-02: 0.02,
    opacity-04: 0.04,
    opacity-06: 0.06,
    opacity-08: 0.08,
    opacity-10: 0.1,
    opacity-20: 0.2,
    opacity-30: 0.3,
    opacity-40: 0.4,
    opacity-50: 0.5,
    opacity-60: 0.6,
    opacity-70: 0.7,
    opacity-80: 0.8,
    opacity-90: 0.9,
    opacity-100: 1,
  ),

  colors: (
    red: ( hue: 0, sat: var(--color-sat, 75%) ),
    orange: ( hue: 20, sat: var(--color-sat, 75%) ),
    yellow: ( hue: 40, sat: var(--color-sat, 75%) ),
    lemon: ( hue: 60, sat: var(--color-sat, 75%) ),
    olive: ( hue: 80, sat: var(--color-sat, 75%) ),
    lime: ( hue: 100, sat: var(--color-sat, 75%) ),
    green: ( hue: 120, sat: var(--color-sat, 75%) ),
    mint: ( hue: 140, sat: var(--color-sat, 75%) ),
    teal: ( hue: 160, sat: var(--color-sat, 75%) ),
    cyan: ( hue: 180, sat: var(--color-sat, 75%) ),
    sky: ( hue: 200, sat: var(--color-sat, 75%) ),
    blue: ( hue: 220, sat: var(--color-sat, 75%) ),
    indigo: ( hue: 240, sat: var(--color-sat, 75%) ),
    purple: ( hue: 260, sat: var(--color-sat, 75%) ),
    orchid: ( hue: 280, sat: var(--color-sat, 75%) ),
    magenta: ( hue: 300, sat: var(--color-sat, 75%) ),
    pink: ( hue: 320, sat: var(--color-sat, 75%) ),
    crimson: ( hue: 340, sat: var(--color-sat, 75%) ),
  ),

  grayscale-colors: (
    white: ( hue: 0, sat: 0% ),
    black: ( hue: 0, sat: 0% ),

    cool-gray: ( hue: 220, sat: 10% ),
    gray: ( hue: 220, sat: 5% ),
    warm-gray: ( hue: 24, sat: 10% ),
    
    transparent: transparent,
  ),

  gradients: (
    gradient: linear-gradient(var(--gradient)),
    gradient-x-from-white: linear-gradient(to right, rgba(255,255,255,1) 0%, rgba(255,255,255,0) 100%),
    gradient-x-to-white: linear-gradient(to right, rgba(255,255,255,0) 0%, rgba(255,255,255,1) 100%),
    gradient-y-from-white: linear-gradient(to bottom, rgba(255,255,255,1) 0%, rgba(255,255,255,0) 100%),
    gradient-y-to-white: linear-gradient(to bottom, rgba(255,255,255,0) 0%, rgba(255,255,255,1) 100%),
    gradient-x-from-black: linear-gradient(to right, rgba(0,0,0,1) 0%, rgba(0,0,0,0) 100%),
    gradient-x-to-black: linear-gradient(to right, rgba(0,0,0,0) 0%, rgba(0,0,0,1) 100%),
    gradient-y-from-black: linear-gradient(to bottom, rgba(0,0,0,1) 0%, rgba(0,0,0,0) 100%),
    gradient-y-to-black: linear-gradient(to bottom, rgba(0,0,0,0) 0%, rgba(0,0,0,1) 100%),
  ),

  range-limits: (
    margin: 41,
    padding: 41,
    width: 47,
    height: 41,
    gap: 29,
    gutter: 29,
    border-width: 9,
    split-width: 9,
    top: 29,
    right: 29,
    bottom: 29,
    left: 29,
    translate: 29
  ),

  positive-sizes: (
    0: 0,
    1: 1px,
    2: 2px,
    3: 3px,
    4: rem(4),
    5: rem(5),
    6: rem(6),
    7: rem(7),
    8: rem(8),
    9: rem(9),
    10: rem(10),
    12: rem(12),
    14: rem(14),
    16: rem(16),
    18: rem(18),
    20: rem(20),
    24: rem(24),
    28: rem(28),
    32: rem(32),
    36: rem(36),
    40: rem(40),
    48: rem(48),
    56: rem(56),
    64: rem(64),
    72: rem(72),
    80: rem(80),
    96: rem(96),
    112: rem(112),
    128: rem(128),
    144: rem(144),
    160: rem(160),
    192: rem(192),
    224: rem(224),
    256: rem(256),
    288: rem(288),
    320: rem(320),
    384: rem(384),
    448: rem(448),
    512: rem(512),
    576: rem(576),
    640: rem(640),
    768: rem(768),
    896: rem(896),
    1024: rem(1024),
    1152: rem(1152),
    1280: rem(1280),
    1536: rem(1536)
  ),

  negative-sizes: (
    0: 0,
    n1: -1px,
    n2: -2px,
    n3: -3px,
    n4: rem(-4),
    n5: rem(-5),
    n6: rem(-6),
    n7: rem(-7),
    n8: rem(-8),
    n9: rem(-9),
    n10: rem(-10),
    n12: rem(-12),
    n14: rem(-14),
    n16: rem(-16),
    n18: rem(-18),
    n20: rem(-20),
    n24: rem(-24),
    n28: rem(-28),
    n32: rem(-32),
    n36: rem(-36),
    n40: rem(-40),
    n48: rem(-48),
    n56: rem(-56),
    n64: rem(-64),
    n72: rem(-72),
    n80: rem(-80),
    n96: rem(-96),
    n112: rem(-112),
    n128: rem(-128),
    n144: rem(-144),
    n160: rem(-160),
    n192: rem(-192),
    n224: rem(-224),
    n256: rem(-256),
    n288: rem(-288),
    n320: rem(-320),
    n384: rem(-384),
    n448: rem(-448),
    n512: rem(-512),
    n576: rem(-576),
    n640: rem(-640),
    n768: rem(-768),
    n896: rem(-896),
    n1024: rem(-1024),
    n1152: rem(-1152),
    n1280: rem(-1280),
    n1536: rem(-1536)
  ),

  font-families: (
    sans: sans-serif,
    serif: serif,
    mono: monospace,
  ),

  font-sizes: (
    10xl: rem(72),
    9xl: rem(64),
    8xl: rem(56),
    7xl: rem(48),

    6xl: rem(40),
    5xl: rem(36),
    4xl: rem(32),
    3xl: rem(28),
    2xl: rem(24),

    xl: rem(20),
    lg: rem(18),

    base: rem(16),

    md: rem(15),
    sm: rem(14),
    xs: rem(12),
    2xs: rem(10),
  ),

  font-weights: (
    ultralight: 100,
    extralight: 200,
    light: 300,
    regular: 400,
    medium: 500,
    semibold: 600,
    bold: 700,
    extrabold: 800,
    ultrabold: 900
  ),

  leadings: (
    tightest: 1,
    tighter: 1.25,
    tight: 1.5,
    normal: 1.75,
    loose: 2,
    looser: 2.25,
    loosest: 2.5,

    0: 1,
    1: 1.1,
    2: 1.2,
    3: 1.3,
    4: 1.4,
    5: 1.5,
    6: 1.6,
    7: 1.7,
    8: 1.8,
    9: 1.9
  ),

  trackings: (
    tightest: -0.75em,
    tighter: -0.05em,
    tight: -0.025em,
    normal: 0,
    loose: 0.025em,
    looser: 0.05em,
    loosest: 0.075em,

    n9: -0.09em,
    n8: -0.08em,
    n7: -0.07em,
    n6: -0.06em,
    n5: -0.05em,
    n4: -0.04em,
    n3: -0.03em,
    n2: -0.02em,
    n1: -0.01em,
    0: 0,
    1: 0.01em,
    2: 0.02em,
    3: 0.03em,
    4: 0.04em,
    5: 0.05em,
    6: 0.06em,
    7: 0.07em,
    8: 0.08em,
    9: 0.09em,
  ),

  radiuses: (
    xs: rem(4),
    sm: rem(6),
    md: rem(8),
    lg: rem(10),
    xl: rem(12),
    round: 9999px,
  ),

  shadows: (
    xs: (
      0 1px 3px rgba(0, 0, 0, 0.12),
      0 1px 2px rgba(0, 0, 0, 0.24),
    ),
    sm: (
      0 3px 6px rgba(0, 0, 0, 0.16),
      0 3px 6px rgba(0, 0, 0, 0.23),
    ),
    md: (
      0 10px 20px rgba(0, 0, 0, 0.19),
      0 6px 6px rgba(0, 0, 0, 0.23),
    ),
    lg: (
      0 14px 28px rgba(0, 0, 0, 0.25),
      0 10px 10px rgba(0, 0, 0, 0.22),
    ),
    xl: (
      0 19px 38px rgba(0, 0, 0, 0.3),
      0 15px 12px rgba(0, 0, 0, 0.22),
    ),
    focus: (
      0 0 0 3px rgb(63 96 191 / 20%)
    ),
    focus-success: (
      0 0 0 3px rgb(103 204 51 / 20%)
    ),
    focus-warning: (
      0 0 0 3px rgb(242 166 13 / 20%)
    ),
    focus-danger: (
      0 0 0 3px rgb(221 61 60 / 20%)
    )
  ),

  keyframes: (
    spin: (
      from: (
        transform: rotate(0deg)
      ),
      to: (
        transform: rotate(360deg)
      )
    ),
    ping: (
      0%: (
        transform: scale(1),
        opacity: 1,
      ),
      80%: (
        transform: scale(2.25),
        opacity: 0,
      ),
      100%: (
        transform: scale(2.25),
        opacity: 0,
      )
    ),
    bounce: (
      0%: (
        transform: translateY(-25%),
        animation-timing-function: cubic-bezier(.8,0,1,1)
      ),
      50%: (
        transform: none,
        animation-timing-function: cubic-bezier(0,0,.2,1)
      ),
      100%: (
        transform: translateY(-25%),
        animation-timing-function: cubic-bezier(.8,0,1,1)
      )
    ),
    pulse: (
      0%: (
        opacity: 1,
      ),
      50%: (
        opacity: .5,
      ),
      100%: (
        opacity: 1,
      )
    )
  )
) !default;


// CONFIG COMPILER
// ============================================================

$all-config: map.deep-merge($default-config, $config);


// FETCHED VARIABLES
// ============================================================

$important: map.get($all-config, important);
$prefix: map.get($all-config, prefix);
$delimiter: map.get($all-config, delimiter);
$child-delimiter: map.get($all-config, child-delimiter);
$pseudo-delimiter: escape(map.get($all-config, pseudo-delimiter));
$screen-delimiter: escape(map.get($all-config, screen-delimiter));

$headless: map.get($all-config, headless);
$root: map.get($all-config, root);
$debugger: map.get($all-config, debugger);
$dark-mode: map.get($all-config, dark-mode);

$screens: map.get($all-config, screens);

$range-limits: map.get($all-config, range-limits);
$positive-sizes: map.get($all-config, positive-sizes);
$negative-sizes: map.get($all-config, negative-sizes);

$shadows: map.get($all-config, shadows);

$font-families: map.get($all-config, font-families);
$font-sizes: map.get($all-config, font-sizes);
$font-weights: map.get($all-config, font-weights);
$leadings: map.get($all-config, leadings);
$trackings: map.get($all-config, trackings);
$radiuses: map.get($all-config, radiuses);

$tint-levels: map.get($all-config, tint-levels);
$shade-levels: map.get($all-config, shade-levels);
$opacity-levels: map.get($all-config, opacity-levels);

$colors: map.get($all-config, colors);
$grayscale-colors: map.get($all-config, grayscale-colors);
$gradients: map.get($all-config, gradients);


// PRIVATE FUNCTIONS
// ============================================================

// MULTIPLE MAP MERGE FUNCTION
@function merge($maps...) {
  $collection: () !default;
  @each $map in $maps {
    $collection: map.merge($collection, $map);
  }
  @return $collection;
}

// VARIABLIZE MAP FUNCTION (CSS CUSTOM PROPERTIES)
@function variablize-map($map, $shorthand) {
  $variablized-map: ();
  @each $key, $value in $map {
    $delimiter: if($shorthand == null, null, '-');
    $map: (
      $key: var(--#{$shorthand}#{$delimiter}#{$key}),
    );
    $variablized-map: map.merge($variablized-map, $map);
  }

  @return $variablized-map;
}

// GENERATE SCREENS MAP
@function name-screens() {
  $named-screens: ();
  @each $key, $value in $screens {
    $screens: (
      screen-#{$key}: $value,
    );
    $named-screens: map.merge($named-screens, $screens);
  }
  @return $named-screens;
}


// MERGED VARIABLES
// ============================================================


$merged-colors: ();
@if ($colors != null) {
  $merged-colors: map.deep-merge($merged-colors, $colors);
}
@if ($grayscale-colors != null) {
  $merged-colors: map.deep-merge($merged-colors, $grayscale-colors);
}

$merged-sizes: map.deep-merge($positive-sizes, $negative-sizes);


// VARIABLIZED VARIABLES
// ============================================================

$var-radiuses: variablize-map($radiuses, radius);
$var-shadows: variablize-map($shadows, shadow);
$var-font-families: variablize-map($font-families, font);
$var-font-sizes: variablize-map($font-sizes, font);
$var-font-weights: variablize-map($font-weights, font);
$var-leadings: variablize-map($leadings, leading);
$var-trackings: variablize-map($trackings, tracking);


// HELPER FUNCTIONS
// ============================================================

// SCREEN FUNCTIONS
@function screen($screen) {
  $result: ();
  @if (map.get($all-config, screens, $screen)) {
    $result: map.get($all-config, screens, $screen);
  }
  @return $result;
}

@function screens() {
  $result: $screens;
  @return $result;
}

// COLOR FUNCTIONS
@function gradient($gradient) {
  @if (map.get($gradients, $gradient)) {
    $result: ();
    $result: map.get($gradients, $gradient);
    @return $result;
  } @else {
    @error "[#{$gradient}] does not exist";
  }
}

@function gradients() {
  $map: ();
  @if ($gradients == null) {
    @return $map;
  } @else {
    @return $gradients;
  }  
}

@function tint-levels() {
  @return $tint-levels;
}

@function var-tint-levels() {
  $result: ();
  @each $key, $value in tint-levels() {
    $map: (
      $key: var(--#{$key})
    );
    $result: map.merge($result, $map);
  }
  @return $result;
}

@function shade-levels() {
  @return $shade-levels;
}

@function var-shade-levels() {
  $result: ();
  @each $key, $value in shade-levels() {
    $map: (
      $key: var(--#{$key})
    );
    $result: map.merge($result, $map);
  }
  @return $result;
}

@function opacity-levels() {
  @return $opacity-levels;
}

@function bg-colors() {
  $result: ();
  @each $key, $value in $merged-colors {
    @if (meta.type-of($value) == map) {
      
      $hue: map.get($value, hue);
      $saturation: map.get($value, saturation);
      $lightness: map.get($value, lightness);

      $map: ();
      
      @if ($key == white) {
        $map: (
          $key: hsla( var(--#{$key}-hue), var(--#{$key}-sat), 100%, var(--bg-opacity) )
        );
      } @else if ($key == black) {
        $map: (
          $key: hsla( var(--#{$key}-hue), var(--#{$key}-sat), 0%, var(--bg-opacity) )
        );
      } @else {
        $map: (
          $key: hsla( var(--#{$key}-hue), var(--#{$key}-sat), var(--bg-ltn), var(--bg-opacity) )
        );
      }
      $result: map.deep-merge($result, $map);
    } @else {
      $map: (
        $key: $value
      );
      $result: map.deep-merge($result, $map);
    }
  }
  @return $result;
}

@function text-colors() {
  $result: ();
  @each $key, $value in $merged-colors {
    @if (meta.type-of($value) == map) {
      $hue: map.get($value, hue);
      $saturation: map.get($value, saturation);
      $lightness: map.get($value, lightness);
      $map: ();
      
      @if ($key == white) {
        $map: (
          $key: hsla( var(--#{$key}-hue), var(--#{$key}-sat), 100%, var(--color-opacity) )
        );
      } @else if ($key == black) {
        $map: (
          $key: hsla( var(--#{$key}-hue), var(--#{$key}-sat), 0%, var(--color-opacity) )
        );
      } @else {
        $map: (
          $key: hsla( var(--#{$key}-hue), var(--#{$key}-sat), var(--color-ltn), var(--color-opacity) )
        );
      }
      $result: map.deep-merge($result, $map);
    } @else {
      $map: (
        $key: $value
      );
      $result: map.deep-merge($result, $map);
    }
  }
  @return $result;
}

@function placeholder-colors() {
  $result: ();
  @each $key, $value in $merged-colors {
    @if (meta.type-of($value) == map) {
      $hue: map.get($value, hue);
      $saturation: map.get($value, saturation);
      $lightness: map.get($value, lightness);

      $map: ();
      
      @if ($key == white) {
        $map: (
          $key: hsla( var(--#{$key}-hue), var(--#{$key}-sat), 100%, var(--placeholder-opacity) )
        );
      } @else if ($key == black) {
        $map: (
          $key: hsla( var(--#{$key}-hue), var(--#{$key}-sat), 0%, var(--placeholder-opacity) )
        );
      } @else {
        $map: (
          $key: hsla( var(--#{$key}-hue), var(--#{$key}-sat), var(--placeholder-ltn), var(--placeholder-opacity) )
        );
      }
      $result: map.deep-merge($result, $map);
    } @else {
      $map: (
        $key: $value
      );
      $result: map.deep-merge($result, $map);
    }
  }
  @return $result;
}

@function border-colors() {
  $result: ();
  @each $key, $value in $merged-colors {
    @if (meta.type-of($value) == map) {
      $hue: map.get($value, hue);
      $saturation: map.get($value, saturation);
      $lightness: map.get($value, lightness);

      $map: ();
      
      @if ($key == white) {
        $map: (
          $key: hsla( var(--#{$key}-hue), var(--#{$key}-sat), 100%, var(--border-opacity) )
        );
      } @else if ($key == black) {
        $map: (
          $key: hsla( var(--#{$key}-hue), var(--#{$key}-sat), 0%, var(--border-opacity) )
        );
      } @else {
        $map: (
          $key: hsla( var(--#{$key}-hue), var(--#{$key}-sat), var(--border-ltn), var(--border-opacity) )
        );
      }
      $result: map.deep-merge($result, $map);
    } @else {
      $map: (
        $key: $value
      );
      $result: map.deep-merge($result, $map);
    }
  }
  @return $result;
}

@function split-colors() {
  $result: ();
  @each $key, $value in $merged-colors {
    @if (meta.type-of($value) == map) {
      $hue: map.get($value, hue);
      $saturation: map.get($value, saturation);
      $lightness: map.get($value, lightness);

      $map: ();
      
      @if ($key == white) {
        $map: (
          $key: hsla( #{$hue}, #{$saturation}, 100%, var(--split-opacity) )
        );
      } @else if ($key == black) {
        $map: (
          $key: hsla( #{$hue}, #{$saturation}, 0%, var(--split-opacity) )
        );
      } @else {
        $map: (
          $key: hsla( #{$hue}, #{$saturation}, var(--split-ltn), var(--split-opacity) )
        );
      }
      $result: map.deep-merge($result, $map);
    } @else {
      $map: (
        $key: $value
      );
      $result: map.deep-merge($result, $map);
    }
  }
  @return $result;
}

@function fill($key, $lightness: 50%, $opacity: opacity-100) {

  $result: ();

  @if (map.has-key($merged-colors, $key)) {
    $result: hsla( var(--#{$key}-hue), var(--#{$key}-sat), var(--#{$lightness}), var(--#{$opacity}) );
  } @else {
    @error "[#{$key}] does not exist.";
  }

  @return $result;
}

// RADIUS FUNCTIONS
@function radius($radius) {
  @if (map.get($radiuses, $radius)) {
    $result: ();
    $result: map.get($var-radiuses, $radius);
    @return $result;
  } @else {
    @error "[#{$radius}] does not exist";
  }
}

@function radiuses() {
  @return $var-radiuses;
}

// SHADOW FUNCTIONS
@function shadow($shadow) {
  @if (map.get($shadows, $shadow)) {
    $result: ();
    $result: map.get($var-shadows, $shadow);
    @return $result;
  } @else {
    @error "[#{$shadow}] does not exist";
  }
}

@function shadows() {
  @return $var-shadows;
}

// SIZE FUNCTIONS
@function positive-sizes($limit: null) {
  @if ($limit != null) {
    $size-map: ();

    @for $i from 1 through $limit {
      $map: list.nth($positive-sizes, $i);
      $key: list.nth($map, 1);
      $value: list.nth($map, 2);
      $limit-map: (
        $key: $value
      );
      $size-map: map.merge($size-map, $limit-map);
    }

    @return $size-map;
  } @else {
    @return $positive-sizes;
  }
}

@function negative-sizes($limit: null) {
  @if ($limit != null) {
    $size-map: ();

    @for $i from 1 through $limit {
      $map: list.nth($negative-sizes, $i);
      $key: list.nth($map, 1);
      $value: list.nth($map, 2);
      $limit-map: (
        $key: $value
      );
      $size-map: map.merge($size-map, $limit-map);
    }

    @return $size-map;
  } @else {
    @return $negative-sizes;
  }
}

@function size($size, $sizes...) {
  $result: ();
  @if (map.has-key($merged-sizes, $size)) {
    $result: map.get($merged-sizes, $size);
  } @else {
    @error "[#{$size}] does not exist";
  }
  @each $size in $sizes {
    $value: '';
    @if (map.has-key($merged-sizes, $size)) {
      $value: map.get($merged-sizes, $size);
      $result: list.append($result, $value);
    } @else {
      $result: list.append($result, $size);
    }
  }
  @return $result;
}

@function sizes($limit: null) {
  @if ($limit != null) {
    $positive-sizes: positive-sizes($limit);
    $negative-sizes: negative-sizes($limit);
    $size-map: map.merge($positive-sizes, $negative-sizes);
    @return $size-map;
  } @else {
    @return $merged-sizes;
  }
}

// TYPOGRAPHY FUNCTIONS
@function font-family($font-family) {
  @if (map.get($font-families, $font-family)) {
    $result: ();
    $result: map.get($var-font-families, $font-family);
    @return $result;
  } @else {
    @error "[#{$font-family}] does not exist";
  }
}

@function font-families() {
  @return $var-font-families;
}

@function font-size($font-size) {
  @if (map.get($font-sizes, $font-size)) {
    $result: ();
    $result: map.get($var-font-sizes, $font-size);
    @return $result;
  } @else {
    @error "[#{$font-size}] does not exist";
  }
}

@function font-sizes() {
  @return $var-font-sizes;
}

@function font-weight($font-weight) {
  @if (map.get($font-weights, $font-weight)) {
    $result: ();
    $result: map.get($var-font-weights, $font-weight);
    @return $result;
  } @else {
    @error "[#{$font-weight}] does not exist";
  }
}

@function font-weights() {
  @return $var-font-weights;
}

@function leading($leading) {
  @if (map.get($leadings, $leading)) {
    $result: ();
    $result: map.get($var-leadings, $leading);
    @return $result;
  } @else {
    @error "[#{$leading}] does not exist";
  }
}

@function leadings() {
  @return $var-leadings;
}

@function tracking($tracking) {
  @if (map.get($trackings, $tracking)) {
    $result: ();
    $result: map.get($var-trackings, $tracking);
    @return $result;
  } @else {
    @error "[#{$tracking}] does not exist";
  }
}

@function trackings() {
  @return $var-trackings;
}

// HELPER MIXINS
// ============================================================

@mixin screen($screen) {
  @media (min-width: screen($screen)) {
    @content; 
  }
}

@mixin apply($utilities...) {
  @each $utility in $utilities {
    $escaped-utility: escape($utility);
    @extend %#{$escaped-utility};
  }
}

// ROOT VARIABLES
// ============================================================

// Create root variables if CSS custom property setting is enabled
:root {
  --FONT-FAMILIES-----------------:#01;
  @each $key, $value in $font-families {
    --font-#{'' + $key}: #{$value};
  }
  --FONT-SIZES--------------------:#02;
  @each $key, $value in $font-sizes {
    --font-#{'' + $key}: #{$value};
  }
  --FONT-WEIGHTS------------------:#03;
  @each $key, $value in $font-weights {
    --font-#{'' + $key}: #{$value};
  }
  --LEADING-----------------------:#04;
  @each $key, $value in $leadings {
    --leading-#{'' + $key}: #{$value};
  }
  --TRACKING----------------------:#05;
  @each $key, $value in $trackings {
    --tracking-#{'' + $key}: #{$value};
  }
  --RADIUS------------------------:#06;
  @each $key, $value in $radiuses {
    --radius-#{'' + $key}: #{$value};
  }
  --SHADOWS-----------------------:#07;
  @each $key, $value in $shadows {
    --shadow-#{'' + $key}: #{$value};
  }
  --TINT-LEVELS-------------------:#08;
  @each $key, $value in $tint-levels {
    --#{'' + $key}: #{$value};
  }
  --SHADE-LEVELS------------------:#09;
  @each $key, $value in $shade-levels {
    --#{'' + $key}: #{$value};
  }
  --OPACITY-LEVELS----------------:#10;
  @each $key, $value in $opacity-levels {
    --#{'' + $key}: #{$value};
  }
  --COLORS------------------------:#11;
  @each $color, $color-value in $merged-colors {
    @if (meta.type-of($color-value) == map) {
      @each $key, $value in $color-value {
        --#{'' + $color}-#{'' + $key}: #{$value};
      }
    } @else {
      --#{'' + $color}: #{$color-value};
    }
  }

  --SHADE-LEVELS------------------:#12;
  @each $key, $value in $merged-sizes {
    --size-#{'' + $key}: #{$value};
  }
  
}