@use "sass:map";
@use "sass:list";
@use "uniform/config/compiled";

// PRIVATE FUNCTIONS
// ============================================================

// PX TO REM FUNCTION
@function rem($size-in-pixel) {
  $remSize: $size-in-pixel / 16;
  @return #{$remSize}rem;
}

// MULTIPLE MAP MERGE FUNCTION
@function merge($maps...) {
  $collection: ();
  @each $map in $maps {
    $collection: map.merge($collection, $map);
  }
  @return $collection;
}

// VARIABLIZE MAP FUNCTION (CSS CUSTOM PROPERTIES)
@function variablize-map($map, $keyword) {
  $variablized-map: ();
  @each $key, $value in $map {
    $delimiter: if($keyword == '', '', '-');
    $map: (
      $key: var(--#{$keyword}#{$delimiter}#{$key}),
    );
    $variablized-map: merge($variablized-map, $map);
  }

  @return $variablized-map;
}

// VARIABLIZE SCREENS
@function name-screens($screens) {
  $named-screens: ();
  @each $key, $value in $screens {
    $screens: (
      screen-#{$key}: $value,
    );
    $named-screens: merge($named-screens, $screens);
  }
  @return $named-screens;
}

// CORE BREAKPOINTS
// ============================================================

@function screen($screen) {
  @if (map.get($all-config, screens, $screen)) {
    $result: map.get($all-config, screens, $screen);
    @return $result;
  } @else {
    @error "[#{$screen}] does not exist";
  }
}

@function screens() {
  $result: map.get($all-config, screens);
  @return $result;
}

// CORE COLORS
// ============================================================


// $var-colors: variablize-map($colors, '');
// $var-gradients: variablize-map($gradients, '');

// $fills: merge($colors, $gradients) !default;
// $var-fills: variablize-map($fills, '');

// @function color($color) {
//   @if (map.get($colors, $color)) {
//     $result: ();
//     @if ($variablize == true) {
//       $result: map.get($var-colors, $color);
//     } @else {
//       $result: map.get($colors, $color);
//     }
//     @return $result;
//   } @else {
//     @if ($headless == true) {
//       $result: var(--#{$color});
//       @return $result;
//     } @else {
//       @error "[#{$color}] does not exist";
//     }
//   }
// }

// @function colors() {
//   $result: ();
//   @if ($variablize == true) {
//     $result: $var-colors;
//   } @else {
//     $result: $colors;
//   }
//   @return $result;
// }

// @function gradient($gradient) {
//   @if (map.get($gradients, $gradient)) {
//     $result: ();
//     @if ($variablize == true) {
//       $result: map.get($var-gradients, $gradient);
//     } @else {
//       $result: map.get($gradients, $gradient);
//     }
//     @return $result;
//   } @else {
//     @if ($headless == true) {
//       $result: var(--#{$gradient});
//       @return $result;
//     } @else {
//       @error "[#{$gradient}] does not exist";
//     }
//   }
// }

// @function gradients() {
//   $result: ();
//   @if ($variablize == true) {
//     $result: $var-gradients;
//   } @else {
//     $result: $gradients;
//   }
//   @return $result;
// }

// @function fill($fill) {
//   @if (map.get($fills, $fill)) {
//     $result: ();
//     @if ($variablize == true) {
//       $result: map.get($var-fills, $fill);
//     } @else {
//       $result: map.get($fills, $fill);
//     }
//     @return $result;
//   } @else {
//     @if ($headless == true) {
//       $result: var(--#{$fill});
//       @return $result;
//     } @else {
//       @error "[#{$fill}] does not exist";
//     }
//   }
// }

// @function fills() {
//   $result: ();
//   @if ($variablize == true) {
//     $result: $var-fills;
//   } @else {
//     $result: $fills;
//   }
//   @return $result;
// }


// CORE PSEUDOS
// ============================================================


// @function build-settings() {
//   $result: $build-settings;
//   @return $result;
// }

// @function pseudos() {
//   $result: $pseudos;
//   @return $result;
// }





// @function positive-size($positive-size) {
//   @if (map.get($all-positive-sizes, $positive-size)) {
//     $result: ();
//     @if ($variablize == true) {
//       $result: map.get($var-positive-sizes, $positive-size);
//     } @else {
//       $result: map.get($all-positive-sizes, $positive-size);
//     }
//     @return $result;
//   } @else {
//     @if ($headless == true) {
//       $result: var(--size-#{$positive-size});
//       @return $result;
//     } @else {
//       @error "[#{$positive-size}] does not exist";
//     }
//   }
// }

// @function positive-sizes() {
//   $result: ();
//   @if ($variablize == true) {
//     $result: $var-positive-sizes;
//   } @else {
//     $result: $all-positive-sizes;
//   }
//   @return $result;
// }

// @function negative-size($negative-size) {
//   @if (map.get($all-negative-sizes, $negative-size)) {
//     $result: ();
//     @if ($variablize == true) {
//       $result: map.get($var-negative-sizes, $negative-size);
//     } @else {
//       $result: map.get($all-negative-sizes, $negative-size);
//     }
//     @return $result;
//   } @else {
//     @if ($headless == true) {
//       $result: var(--size-#{$negative-size});
//       @return $result;
//     } @else {
//       @error "[#{$negative-size}] does not exist";
//     }
//   }
// }

// @function negative-sizes() {
//   $result: ();
//   @if ($variablize == true) {
//     $result: $var-negative-sizes;
//   } @else {
//     $result: $all-negative-sizes;
//   }
//   @return $result;
// }

// @function size($size, $sizes...) {
//   $result: ();
//   @if (map.has-key($all-sizes, $size)) {
//     @if ($variablize == true) {
//       $result: map.get($var-all-sizes, $size);
//     } @else {
//       $result: map.get($all-sizes, $size);
//     }
//   } @else {
//     $result: list.append($result, $size);
//   }
//   @each $size in $sizes {
//     $value: '';
//     @if (map.has-key($all-sizes, $size)) {
//       @if ($variablize == true) {
//         $value: map.get($var-all-sizes, $size);
//       } @else {
//         $value: map.get($all-sizes, $size);
//       }
//       $result: list.append($result, $value);
//     } @else {
//       $result: list.append($result, $size);
//     }
//   }
//   @return $result;
// }

// @function sizes() {
//   $result: ();
//   @if ($variablize == true) {
//     $result: $var-all-sizes;
//   } @else {
//     $result: $all-sizes;
//   }
//   @return $result;
// }

// $shadows: ();

// $all-shadows: merge($shadows, $shadows);
// $var-shadows: variablize-map($all-shadows, 'shadow');

// @function shadow($shadow) {
//   @if (map.get($all-shadows, $shadow)) {
//     $result: ();
//     @if ($variablize == true) {
//       $result: map.get($var-shadows, $shadow);
//     } @else {
//       $result: map.get($all-shadows, $shadow);
//     }
//     @return $result;
//   } @else {
//     @if ($headless == true) {
//       $result: var(--shadow-#{$shadow});
//       @return $result;
//     } @else {
//       @error "[#{$shadow}] does not exist";
//     }
//   }
// }

// @function shadows() {
//   $result: ();
//   @if ($variablize == true) {
//     $result: $var-shadows;
//   } @else {
//     $result: $all-shadows;
//   }
//   @return $result;
// }







// $negative-sizes: ();

// $all-positive-sizes: merge($positive-sizes, $positive-sizes);
// $var-positive-sizes: variablize-map($all-positive-sizes, 'size');

// $all-negative-sizes: merge($negative-sizes, $negative-sizes);
// $var-negative-sizes: variablize-map($all-negative-sizes, 'size');

// $all-sizes: merge($positive-sizes, $negative-sizes, $positive-sizes, $negative-sizes);
// $var-all-sizes: variablize-map($all-sizes, 'size');








// $trackings: ();

// $all-font-families: merge($font-families, $font-families);
// $var-font-families: variablize-map($all-font-families, 'font');
// $all-font-sizes: merge($font-sizes, $font-sizes);
// $var-font-sizes: variablize-map($all-font-sizes, 'font');
// $all-leadings: merge($leadings, $leadings);
// $var-leadings: variablize-map($all-leadings, 'leading');
// $all-trackings: merge($trackings, $trackings);
// $var-trackings: variablize-map($all-trackings, 'tracking');

// @function font-family($font-family) {
//   @if (map.get($all-font-families, $font-family)) {
//     $result: ();
//     @if ($variablize == true) {
//       $result: map.get($var-font-families, $font-family);
//     } @else {
//       $result: map.get($all-font-families, $font-family);
//     }
//     @return $result;
//   } @else {
//     @if ($headless == true) {
//       $result: var(--font-family-#{$font-family});
//       @return $result;
//     } @else {
//       @error "[#{$font-family}] does not exist";
//     }
//   }
// }

// @function font-families() {
//   $result: ();
//   @if ($variablize == true) {
//     $result: $var-font-families;
//   } @else {
//     $result: $all-font-families;
//   }
//   @return $result;
// }

// @function font-size($font-size) {
//   @if (map.get($all-font-sizes, $font-size)) {
//     $result: ();
//     @if ($variablize == true) {
//       $result: map.get($var-font-sizes, $font-size);
//     } @else {
//       $result: map.get($all-font-sizes, $font-size);
//     }
//     @return $result;
//   } @else {
//     @if ($headless == true) {
//       $result: var(--font-size-#{$font-size});
//       @return $result;
//     } @else {
//       @error "[#{$font-size}] does not exist";
//     }
//   }
// }

// @function font-sizes() {
//   $result: ();
//   @if ($variablize == true) {
//     $result: $var-font-sizes;
//   } @else {
//     $result: $all-font-sizes;
//   }
//   @return $result;
// }

// @function leading($leading) {
//   @if (map.get($all-leadings, $leading)) {
//     $result: ();
//     @if ($variablize == true) {
//       $result: map.get($var-leadings, $leading);
//     } @else {
//       $result: map.get($all-leadings, $leading);
//     }
//     @return $result;
//   } @else {
//     @if ($headless == true) {
//       $result: var(--leading-#{$leading});
//       @return $result;
//     } @else {
//       @error "[#{$leading}] does not exist";
//     }
//   }
// }

// @function leadings() {
//   $result: ();
//   @if ($variablize == true) {
//     $result: $var-leadings;
//   } @else {
//     $result: $all-leadings;
//   }
//   @return $result;
// }

// @function tracking($tracking) {
//   @if (map.get($all-trackings, $tracking)) {
//     $result: ();
//     @if ($variablize == true) {
//       $result: map.get($var-trackings, $tracking);
//     } @else {
//       $result: map.get($all-trackings, $tracking);
//     }
//     @return $result;
//   } @else {
//     @if ($headless == true) {
//       $result: var(--tracking-#{$tracking});
//       @return $result;
//     } @else {
//       @error "[#{$tracking}] does not exist";
//     }
//   }
// }

// @function trackings() {
//   $result: ();
//   @if ($variablize == true) {
//     $result: $var-trackings;
//   } @else {
//     $result: $all-trackings;
//   }
//   @return $result;
// }

// $radiuses: ();
// $all-radiuses: merge($radiuses, $radiuses);
// $var-radiuses: variablize-map($all-radiuses, 'radius');

// @function radius($radius) {
//   @if (map.get($all-radiuses, $radius)) {
//     $result: ();
//     @if ($variablize == true) {
//       $result: map.get($var-radiuses, $radius);
//     } @else {
//       $result: map.get($all-radiuses, $radius);
//     }
//     @return $result;
//   } @else {
//     @if ($headless == true) {
//       $result: var(--radius-#{$radius});
//       @return $result;
//     } @else {
//       @error "[#{$radius}] does not exist";
//     }
//   }
// }

// @function radiuses() {
//   $result: ();
//   @if ($variablize == true) {
//     $result: $var-radiuses;
//   } @else {
//     $result: $all-radiuses;
//   }
//   @return $result;
// }




// CONFIG COMPILER
// ============================================================

$config: compiled.$config;

@mixin constructor($config) {

  $important: map.get($config, important);
  $prefix: map.get($config, prefix);
  $delimiter: map.get($config, delimiter);
  $child-delimiter: map.get($config, child-delimiter);
  $pseudo-delimiter: map.get($config, pseudo-delimiter);
  $screen-delimiter: map.get($config, screen-delimiter);
  $variablize: map.get($config, variablize);
  $headless: map.get($config, headless);
  $root: map.get($config, root);
  $debugger: map.get($config, debugger);

  $include-reset-styles: map.get($config, include-reset-styles);
  $include-starter-styles: map.get($config, include-starter-styles);
  $include-wrapper-module: map.get($config, include-wrapper-module);
  $include-table-module: map.get($config, include-table-module);
  $include-button-module: map.get($config, include-button-module);
  $include-form-module: map.get($config, include-form-module);

  $utilities: map.get($config, utilities);
  $excludes: map.get($config, excludes);

  $all-pseudos: map.get($config, pseudos);
  $all-screens: map.get($config, screens);

  $colors: map.get($config, colors);
  $gradients: map.get($config, gradients);

  @if ($headless == false) {
    @if ($debugger == true) {

      // NON RESPONSIVE
      // loop through utilities
      @each $utility, $utility-value in $utilities {
        $keyword: map.get($utility-value, keyword);
        $responsive: map.get($utility-value, responsive);
        $responsive-pseudos: map.get($utility-value, responsive-pseudos);
        $properties: map.get($utility-value, properties);
        $default-variants: map.get($utility-value, default-variants);
        $variants: map.get($utility-value, variants);

        // Construct standard classes
        @each $default-variant, $default-variant-value in $default-variants {
          @if $default-variant == null {
            .#{$prefix}#{if($keyword == null, null, $keyword)} {
              @each $property in $properties {
                #{$property}: $default-variant-value if($important == true, !important, null);
              }
            }
          } @else {
            .#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant} {
              @each $property in $properties {
                #{$property}: $default-variant-value if($important == true, !important, null);
              }
            }
          }
        }
        @each $variant, $variant-value in $variants {
          @if $variant == null {
            .#{$prefix}#{if($keyword == null, null, $keyword)} {
              @each $property in $properties {
                #{$property}: $variant-value if($important == true, !important, null);
              }
            }
          } @else {
            .#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant} {
              @each $property in $properties {
                #{$property}: $variant-value if($important == true, !important, null);
              }
            }
          }
        }

        // Construct standard pseudo classes
        @each $pseudo, $pseudo-value in $all-pseudos {
          @each $default-variant, $default-variant-value in $default-variants {
            @if $default-variant == null {
              
              @if $pseudo == group-hover {
                .group:hover .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                  @each $property in $properties {
                    #{$property}: $default-variant-value if($important == true, !important, null);
                  }
                }  
              } @else if $pseudo == group-focus {
                .group:focus .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                  @each $property in $properties {
                    #{$property}: $default-variant-value if($important == true, !important, null);
                  }
                }  
              } @else {
                .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)}:#{$pseudo-value} {
                  @each $property in $properties {
                    #{$property}: $default-variant-value if($important == true, !important, null);
                  }
                }
              }

            } @else {
              @if $pseudo == group-hover {
                .group:hover .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant} {
                  @each $property in $properties {
                    #{$property}: $default-variant-value if($important == true, !important, null);
                  }
                }
              } @else if $pseudo == group-focus {
                .group:focus .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant} {
                  @each $property in $properties {
                    #{$property}: $default-variant-value if($important == true, !important, null);
                  }
                } 
              } @else {
                .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant}:#{$pseudo-value} {
                  @each $property in $properties {
                    #{$property}: $default-variant-value if($important == true, !important, null);
                  }
                }
              }
            }
          }
          @each $variant, $variant-value in $variants {
            @if $variant == null {
              
              @if $pseudo == group-hover {
                .group:hover .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                  @each $property in $properties {
                    #{$property}: $variant-value if($important == true, !important, null);
                  }
                }  
              } @else if $pseudo == group-focus {
                .group:focus .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                  @each $property in $properties {
                    #{$property}: $variant-value if($important == true, !important, null);
                  }
                }  
              } @else {
                .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)}:#{$pseudo-value} {
                  @each $property in $properties {
                    #{$property}: $variant-value if($important == true, !important, null);
                  }
                }
              }

            } @else {
              @if $pseudo == group-hover {
                .group:hover .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant} {
                  @each $property in $properties {
                    #{$property}: $variant-value if($important == true, !important, null);
                  }
                }
              } @else if $pseudo == group-focus {
                .group:focus .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant} {
                  @each $property in $properties {
                    #{$property}: $variant-value if($important == true, !important, null);
                  }
                } 
              } @else {
                .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant}:#{$pseudo-value} {
                  @each $property in $properties {
                    #{$property}: $variant-value if($important == true, !important, null);
                  }
                }
              }
            }
          }
        }
      }
      
      // RESPONSIVE
      // loop through screens
      @each $screen, $screen-value in $all-screens {
        @media (min-width: $screen-value) {  
          // loop through utilities
          @each $utility, $utility-value in $utilities {
            $keyword: map.get($utility-value, keyword);
            $responsive: map.get($utility-value, responsive);
            $responsive-pseudos: map.get($utility-value, responsive-pseudos);
            $properties: map.get($utility-value, properties);
            $default-variants: map.get($utility-value, default-variants);
            $variants: map.get($utility-value, variants);

            // Construct responsive classes
            @each $default-variant, $default-variant-value in $default-variants {
              @if $default-variant == null {
                .#{$screen}#{$screen-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                  @each $property in $properties {
                    #{$property}: $default-variant-value if($important == true, !important, null);
                  }
                }
              } @else {
                .#{$screen}#{$screen-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant} {
                  @each $property in $properties {
                    #{$property}: $default-variant-value if($important == true, !important, null);
                  }
                }
              }
            }
            @each $variant, $variant-value in $variants {
              @if $variant == null {
                .#{$screen}#{$screen-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                  @each $property in $properties {
                    #{$property}: $variant-value if($important == true, !important, null);
                  }
                }
              } @else {
                .#{$screen}#{$screen-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant} {
                  @each $property in $properties {
                    #{$property}: $variant-value if($important == true, !important, null);
                  }
                }
              }
            }
            

            // Construct responsive pseudo classes
            @each $pseudo, $pseudo-value in $all-pseudos {
              @each $default-variant, $default-variant-value in $default-variants {
                @if $default-variant == null {
                  
                  @if $pseudo == group-hover {
                    .group:hover .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    }  
                  } @else if $pseudo == group-focus {
                    .group:focus .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    }  
                  } @else {
                    .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)}:#{$pseudo-value} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    }
                  }

                } @else {
                  @if $pseudo == group-hover {
                    .group:hover .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    }
                  } @else if $pseudo == group-focus {
                    .group:focus .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    } 
                  } @else {
                    .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant}:#{$pseudo-value} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    }
                  }
                }
              }
              @each $variant, $variant-value in $variants {
                @if $variant == null {
                  
                  @if $pseudo == group-hover {
                    .group:hover .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }  
                  } @else if $pseudo == group-focus {
                    .group:focus .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }  
                  } @else {
                    .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)}:#{$pseudo-value} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }
                  }

                } @else {
                  @if $pseudo == group-hover {
                    .group:hover .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }
                  } @else if $pseudo == group-focus {
                    .group:focus .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    } 
                  } @else {
                    .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant}:#{$pseudo-value} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

    } @else {

      // NON RESPONSIVE
      // loop through utilities
      @each $utility, $utility-value in $utilities {
        $keyword: map.get($utility-value, keyword);
        $responsive: map.get($utility-value, responsive);
        $responsive-pseudos: map.get($utility-value, responsive-pseudos);
        $properties: map.get($utility-value, properties);
        $default-variants: map.get($utility-value, default-variants);
        $default-pseudos: map.get($utility-value, default-pseudos);
        $variants: map.get($utility-value, variants);
        $pseudos: map.get($utility-value, pseudos);
        
        // check if utility exists in the exclude list
        @if (list.index($excludes, $utility) == null) {
          // Construct standard classes
          @each $default-variant, $default-variant-value in $default-variants {
            @if $default-variant == null {
              .#{$prefix}#{if($keyword == null, null, $keyword)} {
                @each $property in $properties {
                  #{$property}: $default-variant-value if($important == true, !important, null);
                }
              }
            } @else {
              .#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant} {
                @each $property in $properties {
                  #{$property}: $default-variant-value if($important == true, !important, null);
                }
              }
            }
          }
          @each $variant, $variant-value in $variants {
            @if $variant == null {
              .#{$prefix}#{if($keyword == null, null, $keyword)} {
                @each $property in $properties {
                  #{$property}: $variant-value if($important == true, !important, null);
                }
              }
            } @else {
              .#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant} {
                @each $property in $properties {
                  #{$property}: $variant-value if($important == true, !important, null);
                }
              }
            }
          }

          // Construct standard pseudo classes
          @each $default-pseudo in $default-pseudos {
            @if map.has-key($all-pseudos, $default-pseudo) {
              @each $default-variant, $default-variant-value in $default-variants {
                @if $default-variant == null {
                  
                  @if $default-pseudo == group-hover {
                    .group:hover .#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    }  
                  } @else if $default-pseudo == group-focus {
                    .group:focus .#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    }  
                  } @else {
                    .#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)}:#{map.get($all-pseudos, $default-pseudo)} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    }
                  }

                } @else {
                  @if $default-pseudo == group-hover {
                    .group:hover .#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    }
                  } @else if $default-pseudo == group-focus {
                    .group:focus .#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    } 
                  } @else {
                    .#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant}:#{map.get($all-pseudos, $default-pseudo)} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    }
                  }
                }
              }
              @each $variant, $variant-value in $variants {
                @if $variant == null {
                  
                  @if $default-pseudo == group-hover {
                    .group:hover .#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }  
                  } @else if $default-pseudo == group-focus {
                    .group:focus .#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }  
                  } @else {
                    .#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)}:#{map.get($all-pseudos, $default-pseudo)} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }
                  }

                } @else {
                  @if $default-pseudo == group-hover {
                    .group:hover .#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }
                  } @else if $default-pseudo == group-focus {
                    .group:focus .#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    } 
                  } @else {
                    .#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant}:#{map.get($all-pseudos, $default-pseudo)} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }
                  }
                }
              }
            }
          }
          @each $pseudo in $pseudos {
            @if map.has-key($all-pseudos, $pseudo) {
              @each $default-variant, $default-variant-value in $default-variants {
                @if $default-variant == null {
                  
                  @if $pseudo == group-hover {
                    .group:hover .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    }  
                  } @else if $pseudo == group-focus {
                    .group:focus .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    }  
                  } @else {
                    .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)}:#{map.get($all-pseudos, $pseudo)} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    }
                  }

                } @else {
                  @if $pseudo == group-hover {
                    .group:hover .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    }
                  } @else if $pseudo == group-focus {
                    .group:focus .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    } 
                  } @else {
                    .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant}:#{map.get($all-pseudos, $pseudo)} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    }
                  }
                }
              }
              @each $variant, $variant-value in $variants {
                @if $variant == null {
                  
                  @if $pseudo == group-hover {
                    .group:hover .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }  
                  } @else if $pseudo == group-focus {
                    .group:focus .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }  
                  } @else {
                    .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)}:#{map.get($all-pseudos, $pseudo)} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }
                  }

                } @else {
                  @if $pseudo == group-hover {
                    .group:hover .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }
                  } @else if $pseudo == group-focus {
                    .group:focus .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    } 
                  } @else {
                    .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant}:#{map.get($all-pseudos, $pseudo)} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }
                  }
                }
              }
            }
          }
        } @else {

        }
      }
      
      // RESPONSIVE
      // loop through screens
      @each $screen, $screen-value in $all-screens {
        @media (min-width: $screen-value) {  
          // loop through utilities
          @each $utility, $utility-value in $utilities {
            $keyword: map.get($utility-value, keyword);
            $responsive: map.get($utility-value, responsive);
            $responsive-pseudos: map.get($utility-value, responsive-pseudos);
            $properties: map.get($utility-value, properties);
            $default-variants: map.get($utility-value, default-variants);
            $default-pseudos: map.get($utility-value, default-pseudos);
            $variants: map.get($utility-value, variants);
            $pseudos: map.get($utility-value, pseudos);

            // check if utility exists in the exclude list
            @if (list.index($excludes, $utility) == null) {
              @if $responsive == true {
                
                // Construct responsive classes
                @each $default-variant, $default-variant-value in $default-variants {
                  @if $default-variant == null {
                    .#{$screen}#{$screen-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    }
                  } @else {
                    .#{$screen}#{$screen-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    }
                  }
                }
                @each $variant, $variant-value in $variants {
                  @if $variant == null {
                    .#{$screen}#{$screen-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }
                  } @else {
                    .#{$screen}#{$screen-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }
                  }
                }
                

                @if $responsive-pseudos == true {
                  // Construct responsive pseudo classes
                  @each $default-pseudo in $default-pseudos {
                    @if map.has-key($all-pseudos, $default-pseudo) {
                      @each $default-variant, $default-variant-value in $default-variants {
                        @if $default-variant == null {
                          
                          @if $default-pseudo == group-hover {
                            .group:hover .#{$screen}#{$screen-delimiter}#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                              @each $property in $properties {
                                #{$property}: $default-variant-value if($important == true, !important, null);
                              }
                            }  
                          } @else if $default-pseudo == group-focus {
                            .group:focus .#{$screen}#{$screen-delimiter}#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                              @each $property in $properties {
                                #{$property}: $default-variant-value if($important == true, !important, null);
                              }
                            }  
                          } @else {
                            .#{$screen}#{$screen-delimiter}#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)}:#{map.get($all-pseudos, $default-pseudo)} {
                              @each $property in $properties {
                                #{$property}: $default-variant-value if($important == true, !important, null);
                              }
                            }
                          }

                        } @else {
                          @if $default-pseudo == group-hover {
                            .group:hover .#{$screen}#{$screen-delimiter}#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant} {
                              @each $property in $properties {
                                #{$property}: $default-variant-value if($important == true, !important, null);
                              }
                            }
                          } @else if $default-pseudo == group-focus {
                            .group:focus .#{$screen}#{$screen-delimiter}#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant} {
                              @each $property in $properties {
                                #{$property}: $default-variant-value if($important == true, !important, null);
                              }
                            } 
                          } @else {
                            .#{$screen}#{$screen-delimiter}#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant}:#{map.get($all-pseudos, $default-pseudo)} {
                              @each $property in $properties {
                                #{$property}: $default-variant-value if($important == true, !important, null);
                              }
                            }
                          }
                        }
                      }
                      @each $variant, $variant-value in $variants {
                        @if $variant == null {
                          
                          @if $default-pseudo == group-hover {
                            .group:hover .#{$screen}#{$screen-delimiter}#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                              @each $property in $properties {
                                #{$property}: $variant-value if($important == true, !important, null);
                              }
                            }  
                          } @else if $default-pseudo == group-focus {
                            .group:focus .#{$screen}#{$screen-delimiter}#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                              @each $property in $properties {
                                #{$property}: $variant-value if($important == true, !important, null);
                              }
                            }  
                          } @else {
                            .#{$screen}#{$screen-delimiter}#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)}:#{map.get($all-pseudos, $default-pseudo)} {
                              @each $property in $properties {
                                #{$property}: $variant-value if($important == true, !important, null);
                              }
                            }
                          }

                        } @else {
                          @if $default-pseudo == group-hover {
                            .group:hover .#{$screen}#{$screen-delimiter}#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant} {
                              @each $property in $properties {
                                #{$property}: $variant-value if($important == true, !important, null);
                              }
                            }
                          } @else if $default-pseudo == group-focus {
                            .group:focus .#{$screen}#{$screen-delimiter}#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant} {
                              @each $property in $properties {
                                #{$property}: $variant-value if($important == true, !important, null);
                              }
                            } 
                          } @else {
                            .#{$screen}#{$screen-delimiter}#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant}:#{map.get($all-pseudos, $default-pseudo)} {
                              @each $property in $properties {
                                #{$property}: $variant-value if($important == true, !important, null);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  @each $pseudo in $pseudos {
                    @if map.has-key($all-pseudos, $pseudo) {
                      @each $default-variant, $default-variant-value in $default-variants {
                        @if $default-variant == null {
                          
                          @if $pseudo == group-hover {
                            .group:hover .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                              @each $property in $properties {
                                #{$property}: $default-variant-value if($important == true, !important, null);
                              }
                            }  
                          } @else if $pseudo == group-focus {
                            .group:focus .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                              @each $property in $properties {
                                #{$property}: $default-variant-value if($important == true, !important, null);
                              }
                            }  
                          } @else {
                            .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)}:#{map.get($all-pseudos, $pseudo)} {
                              @each $property in $properties {
                                #{$property}: $default-variant-value if($important == true, !important, null);
                              }
                            }
                          }

                        } @else {
                          @if $pseudo == group-hover {
                            .group:hover .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant} {
                              @each $property in $properties {
                                #{$property}: $default-variant-value if($important == true, !important, null);
                              }
                            }
                          } @else if $pseudo == group-focus {
                            .group:focus .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant} {
                              @each $property in $properties {
                                #{$property}: $default-variant-value if($important == true, !important, null);
                              }
                            } 
                          } @else {
                            .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant}:#{map.get($all-pseudos, $pseudo)} {
                              @each $property in $properties {
                                #{$property}: $default-variant-value if($important == true, !important, null);
                              }
                            }
                          }
                        }
                      }
                      @each $variant, $variant-value in $variants {
                        @if $variant == null {
                          
                          @if $pseudo == group-hover {
                            .group:hover .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                              @each $property in $properties {
                                #{$property}: $variant-value if($important == true, !important, null);
                              }
                            }  
                          } @else if $pseudo == group-focus {
                            .group:focus .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                              @each $property in $properties {
                                #{$property}: $variant-value if($important == true, !important, null);
                              }
                            }  
                          } @else {
                            .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)}:#{map.get($all-pseudos, $pseudo)} {
                              @each $property in $properties {
                                #{$property}: $variant-value if($important == true, !important, null);
                              }
                            }
                          }

                        } @else {
                          @if $pseudo == group-hover {
                            .group:hover .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant} {
                              @each $property in $properties {
                                #{$property}: $variant-value if($important == true, !important, null);
                              }
                            }
                          } @else if $pseudo == group-focus {
                            .group:focus .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant} {
                              @each $property in $properties {
                                #{$property}: $variant-value if($important == true, !important, null);
                              }
                            } 
                          } @else {
                            .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant}:#{map.get($all-pseudos, $pseudo)} {
                              @each $property in $properties {
                                #{$property}: $variant-value if($important == true, !important, null);
                              }
                            }
                          }
                        }
                      }
                    }
                  }

                }
              }
            } @else {

            }
          }
        }
      }


    }
  }
}