@use "uniform/config/default";
@use "uniform/config/user";
@use "sass:map";
@use "sass:list";

// CONFIG COMPILER
// ============================================================

$config: map.deep-merge(default.$config, user.$config);


// FETCHED VARIABLES
// ============================================================

$important: map.get($config, important);
$prefix: map.get($config, prefix);
$delimiter: map.get($config, delimiter);
$child-delimiter: map.get($config, child-delimiter);
$pseudo-delimiter: map.get($config, pseudo-delimiter);
$screen-delimiter: map.get($config, screen-delimiter);
$variablize: map.get($config, variablize);
$headless: map.get($config, headless);
$root: map.get($config, root);
$debugger: map.get($config, debugger);

$include-reset-styles: map.get($config, include-reset-styles);
$include-starter-styles: map.get($config, include-starter-styles);
$include-wrapper-module: map.get($config, include-wrapper-module);
$include-table-module: map.get($config, include-table-module);
$include-button-module: map.get($config, include-button-module);
$include-form-module: map.get($config, include-form-module);

$screens: map.get($config, screens);
$positive-sizes: map.get($config, positive-sizes);
$negative-sizes: map.get($config, negative-sizes);

$shadows: map.get($config, shadows);

$font-families: map.get($config, font-families);
$font-sizes: map.get($config, font-sizes);
$leadings: map.get($config, leadings);
$trackings: map.get($config, trackings);
$radiuses: map.get($config, radiuses);

$primary-colors: map.get($config, primary-colors);
$opaque-colors: map.get($config, opaque-colors);
$grayscale-colors: map.get($config, grayscale-colors);
$monotone-colors: map.get($config, monotone-colors);
$colors: map.get($config, colors);
$gradients: map.get($config, gradients);


// PRIVATE FUNCTIONS
// ============================================================

// PX TO REM FUNCTION
@function rem($size-in-pixel) {
  $remSize: $size-in-pixel / 16;
  @return #{$remSize}rem;
}

// MULTIPLE MAP MERGE FUNCTION
@function merge($maps...) {
  $collection: () !default;
  @each $map in $maps {
    $collection: map.merge($collection, $map);
  }
  @return $collection;
}

// DEEP MAP GET FUNCTION
@function get($map, $keys...) {
  @each $key in $keys {
    $map: map.get($map, $key);
  }
  @return $map;
}

// VARIABLIZE MAP FUNCTION (CSS CUSTOM PROPERTIES)
@function variablize-map($map, $keyword) {
  $variablized-map: ();
  @each $key, $value in $map {
    $delimiter: if($keyword == null, null, '-');
    $map: (
      $key: var(--#{$keyword}#{$delimiter}#{$key}),
    );
    $variablized-map: merge($variablized-map, $map);
  }

  @return $variablized-map;
}

// VARIABLIZE SCREENS
@function name-screens() {
  $named-screens: ();
  @each $key, $value in $screens {
    $screens: (
      screen-#{$key}: $value,
    );
    $named-screens: merge($named-screens, $screens);
  }
  @return $named-screens;
}


// MERGED VARIABLES
// ============================================================

$sizes: map.deep-merge($positive-sizes, $negative-sizes);
$fills: map.deep-merge($primary-colors, $grayscale-colors);
$fills: map.deep-merge($fills, $opaque-colors);
$fills: map.deep-merge($fills, $monotone-colors);
$fills: map.deep-merge($fills, $colors);
$fills: map.deep-merge($fills, $gradients);


// VARIABLIZED VARIABLES
// ============================================================

$var-primary-colors: variablize-map($primary-colors, null);
$var-opaque-colors: variablize-map($opaque-colors, null);
$var-monotone-colors: variablize-map($monotone-colors, null);
$var-grayscale-colors: variablize-map($grayscale-colors, null);
$var-colors: variablize-map($colors, null);
$var-gradients: variablize-map($gradients, null);
$var-fills: variablize-map($fills, null);

$var-radiuses: variablize-map($radiuses, radius);
$var-shadows: variablize-map($shadows, shadow);

$var-sizes: variablize-map($sizes, size);
$var-positive-sizes: variablize-map($positive-sizes, size);
$var-negative-sizes: variablize-map($negative-sizes, size);

$var-font-families: variablize-map($font-families, font);
$var-font-sizes: variablize-map($font-sizes, font);
$var-leadings: variablize-map($leadings, leading);
$var-trackings: variablize-map($trackings, tracking);

// FETCH FUNCTIONS
// ============================================================

// SCREEN FUNCTIONS
@function screen($screen) {
  $result: ();
  @if (map.get($config, screens, $screen)) {
    $result: map.get($config, screens, $screen);
  }
  @return $result;
}

@function screens() {
  $result: $screens;
  @return $result;
}


// COLOR FUNCTIONS
@function primary-colors() {
  $result: ();
  @if ($variablize == true) {
    $result: $var-primary-colors;
  } @else {
    $result: $primary-colors;
  }
  @return $result;
}

@function opaque-colors() {
  $result: ();
  @if ($variablize == true) {
    $result: $var-opaque-colors;
  } @else {
    $result: $opaque-colors;
  }
  @return $result;
}

@function grayscale-colors() {
  $result: ();
  @if ($variablize == true) {
    $result: $var-grayscale-colors;
  } @else {
    $result: $grayscale-colors;
  }
  @return $result;
}

@function monotone-colors() {
  $result: ();
  @if ($variablize == true) {
    $result: $var-monotone-colors;
  } @else {
    $result: $monotone-colors;
  }
  @return $result;
}

@function colors() {
  $result: ();
  @if ($variablize == true) {
    $result: $var-colors;
  } @else {
    $result: $colors;
  }
  @return $result;
}

@function gradients() {
  $result: ();
  @if ($variablize == true) {
    $result: $var-gradients;
  } @else {
    $result: $gradients;
  }
  @return $result;
}

@function fills() {
  $result: ();
  @if ($variablize == true) {
    $result: $var-fills;
  } @else {
    $result: $fills;
  }
  @return $result;
}

@function fill($fill) {
  @if (map.get($fills, $fill)) {
    $result: ();
    @if ($variablize == true) {
      $result: map.get($var-fills, $fill);
    } @else {
      $result: map.get($fills, $fill);
    }
    @return $result;
  } @else {
    @if ($headless == true) {
      $result: var(--#{$fill});
      @return $result;
    } @else {
      @error "[#{$fill}] does not exist";
    }
  }
}


// RADIUS FUNCTIONS
@function radiuses() {
  $result: ();
  @if ($variablize == true) {
    $result: $var-radiuses;
  } @else {
    $result: $radiuses;
  }
  @return $result;
}

@function radius($radius) {
  @if (map.get($radiuses, $radius)) {
    $result: ();
    @if ($variablize == true) {
      $result: map.get($var-radiuses, $radius);
    } @else {
      $result: map.get($radiuses, $radius);
    }
    @return $result;
  } @else {
    @if ($headless == true) {
      $result: var(--radius-#{$radius});
      @return $result;
    } @else {
      @error "[#{$radius}] does not exist";
    }
  }
}


// SHADOW FUNCTIONS
@function shadow($shadow) {
  @if (map.get($shadows, $shadow)) {
    $result: ();
    @if ($variablize == true) {
      $result: map.get($var-shadows, $shadow);
    } @else {
      $result: map.get($shadows, $shadow);
    }
    @return $result;
  } @else {
    @if ($headless == true) {
      $result: var(--shadow-#{$shadow});
      @return $result;
    } @else {
      @error "[#{$shadow}] does not exist";
    }
  }
}

@function shadows() {
  $result: ();
  @if ($variablize == true) {
    $result: $var-shadows;
  } @else {
    $result: $shadows;
  }
  @return $result;
}


// SIZE FUNCTIONS
@function positive-sizes() {
  $result: ();
  @if ($variablize == true) {
    $result: $var-positive-sizes;
  } @else {
    $result: $positive-sizes;
  }
  @return $result;
}

@function negative-sizes() {
  $result: ();
  @if ($variablize == true) {
    $result: $var-negative-sizes;
  } @else {
    $result: $negative-sizes;
  }
  @return $result;
}

@function size($size, $size-cont...) {
  $result: ();
  @if (map.has-key($sizes, $size)) {
    @if ($variablize == true) {
      $result: map.get($var-sizes, $size);
    } @else {
      $result: map.get($sizes, $size);
    }
  } @else {
    $result: list.append($result, $size);
  }
  @each $size in $size-cont {
    $value: '';
    @if (map.has-key($sizes, $size)) {
      @if ($variablize == true) {
        $value: map.get($var-sizes, $size);
      } @else {
        $value: map.get($sizes, $size);
      }
      $result: list.append($result, $value);
    } @else {
      $result: list.append($result, $size);
    }
  }
  @return $result;
}

@function sizes() {
  $result: ();
  @if ($variablize == true) {
    $result: $var-sizes;
  } @else {
    $result: $sizes;
  }
  @return $result;
}

@function size($size, $more-sizes...) {
  $result: ();
  @if (map.has-key($sizes, $size)) {
    @if ($variablize == true) {
      $result: map.get($var-sizes, $size);
    } @else {
      $result: map.get($sizes, $size);
    }
  } @else {
    $result: list.append($result, $size);
  }
  @each $size in $more-sizes {
    $value: '';
    @if (map.has-key($sizes, $size)) {
      @if ($variablize == true) {
        $value: map.get($var-sizes, $size);
      } @else {
        $value: map.get($sizes, $size);
      }
      $result: list.append($result, $value);
    } @else {
      $result: list.append($result, $size);
    }
  }
  @return $result;
}


// TYPOGRAPHY FUNCTIONS
@function font-families() {
  $result: ();
  @if ($variablize == true) {
    $result: $var-font-families;
  } @else {
    $result: $font-families;
  }
  @return $result;
}

@function font-family($font-family) {
  @if (map.get($font-families, $font-family)) {
    $result: ();
    @if ($variablize == true) {
      $result: map.get($var-font-families, $font-family);
    } @else {
      $result: map.get($font-families, $font-family);
    }
    @return $result;
  } @else {
    @if ($headless == true) {
      $result: var(--font-family-#{$font-family});
      @return $result;
    } @else {
      @error "[#{$font-family}] does not exist";
    }
  }
}

@function font-sizes() {
  $result: ();
  @if ($variablize == true) {
    $result: $var-font-sizes;
  } @else {
    $result: $font-sizes;
  }
  @return $result;
}

@function font-size($font-size) {
  @if (map.get($font-sizes, $font-size)) {
    $result: ();
    @if ($variablize == true) {
      $result: map.get($var-font-sizes, $font-size);
    } @else {
      $result: map.get($font-sizes, $font-size);
    }
    @return $result;
  } @else {
    @if ($headless == true) {
      $result: var(--font-size-#{$font-size});
      @return $result;
    } @else {
      @error "[#{$font-size}] does not exist";
    }
  }
}

@function leadings() {
  $result: ();
  @if ($variablize == true) {
    $result: $var-leadings;
  } @else {
    $result: $leadings;
  }
  @return $result;
}

@function leading($leading) {
  @if (map.get($leadings, $leading)) {
    $result: ();
    @if ($variablize == true) {
      $result: map.get($var-leadings, $leading);
    } @else {
      $result: map.get($leadings, $leading);
    }
    @return $result;
  } @else {
    @if ($headless == true) {
      $result: var(--leading-#{$leading});
      @return $result;
    } @else {
      @error "[#{$leading}] does not exist";
    }
  }
}

@function trackings() {
  $result: ();
  @if ($variablize == true) {
    $result: $var-trackings;
  } @else {
    $result: $trackings;
  }
  @return $result;
}

@function tracking($tracking) {
  @if (map.get($trackings, $tracking)) {
    $result: ();
    @if ($variablize == true) {
      $result: map.get($var-trackings, $tracking);
    } @else {
      $result: map.get($trackings, $tracking);
    }
    @return $result;
  } @else {
    @if ($headless == true) {
      $result: var(--tracking-#{$tracking});
      @return $result;
    } @else {
      @error "[#{$tracking}] does not exist";
    }
  }
}

// ROOT VARIABLES
// ============================================================

// Create root variables if CSS custom property setting is enabled
@if ($variablize == true) {
  @if ($root == true) {

    :root {
      @each $key, $value in $fills {
        --#{'' + $key}: #{$value};
      }
      @each $key, $value in $sizes {
        --size-#{'' + $key}: #{$value};
      }
      @each $key, $value in $shadows {
        --shadow-#{'' + $key}: #{$value};
      }
      @each $key, $value in $font-families {
        --font-#{'' + $key}: #{$value};
      }
      @each $key, $value in $font-sizes {
        --font-#{'' + $key}: #{$value};
      }
      @each $key, $value in $leadings {
        --leading-#{'' + $key}: #{$value};
      }
      @each $key, $value in $trackings {
        --tracking-#{'' + $key}: #{$value};
      }
      @each $key, $value in $radiuses {
        --radius-#{'' + $key}: #{$value};
      }
    }
  }
}