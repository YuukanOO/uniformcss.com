/*! UniformCSS v1.0.0 | MIT License | github.com/UniformCSS/uniformcss */
@use "sass:map";
@use "sass:list";
@forward "config/user-settings";

// CORE - ALIGNMENT (6)
@use "utilities/alignment/core-align-content";
@use "utilities/alignment/core-align-items";
// @use "utilities/alignment/core-align-self";
// @use "utilities/alignment/core-justify-content";
// @use "utilities/alignment/core-text-align";
// @use "utilities/alignment/core-vertical-align";


// // CORE - APPEARANCE (6)
// @use "utilities/appearance/core-display";
// @use "utilities/appearance/core-opacity";
// @use "utilities/appearance/core-outline";
// @use "utilities/appearance/core-visibility";
// @use "utilities/appearance/extension-appearance";
// @use "utilities/appearance/extension-font-smooth";


// // CORE - BACKGROUND (7)
// @use "utilities/background/core-background";
// @use "utilities/background/core-background-attachment";
// @use "utilities/background/core-background-clip";
// @use "utilities/background/core-background-color";
// @use "utilities/background/core-background-position";
// @use "utilities/background/core-background-repeat";
// @use "utilities/background/core-background-size";


// // CORE - BORDER (17)
// @use "utilities/border/core-border-collapse";
// @use "utilities/border/core-border-color";
// @use "utilities/border/core-border-style";
// @use "utilities/border/core-border-radius";
// @use "utilities/border/extension-border-bottom-radius";
// @use "utilities/border/extension-border-left-radius";
// @use "utilities/border/extension-border-right-radius";
// @use "utilities/border/extension-border-top-radius";
// @use "utilities/border/core-border-bottom-left-radius";
// @use "utilities/border/core-border-bottom-right-radius";
// @use "utilities/border/core-border-top-left-radius";
// @use "utilities/border/core-border-top-right-radius";
// @use "utilities/border/core-border-width";
// @use "utilities/border/core-border-bottom-width";
// @use "utilities/border/core-border-left-width";
// @use "utilities/border/core-border-right-width";
// @use "utilities/border/core-border-top-width";


// // CORE - COMPOSITION (9)
// @use "utilities/composition/core-box-sizing";
// @use "utilities/composition/core-clear";
// @use "utilities/composition/core-float";
// @use "utilities/composition/core-object-fit";
// @use "utilities/composition/core-object-position";
// @use "utilities/composition/core-position";
// @use "utilities/composition/core-table-layout";
// @use "utilities/composition/extension-clearfix";
// @use "utilities/composition/extension-ratio";


// // CORE - OVERFLOW (3)
// @use "utilities/overflow/core-overflow";
// @use "utilities/overflow/core-overflow-x";
// @use "utilities/overflow/core-overflow-y";


// // CORE - EFFECT (3)
// @use "utilities/effect/core-box-shadow";
// @use "utilities/effect/core-filter";
// @use "utilities/effect/core-mix-blend-mode";


// // CORE - SIZING (6)
// @use "utilities/sizing/core-height";
// @use "utilities/sizing/core-width";
// @use "utilities/sizing/core-min-height";
// @use "utilities/sizing/core-min-width";
// @use "utilities/sizing/core-max-height";
// @use "utilities/sizing/core-max-width";


// // CORE - POSITION (9)
// @use "utilities/position/extension-xy";
// @use "utilities/position/extension-x";
// @use "utilities/position/extension-y";
// @use "utilities/position/core-bottom";
// @use "utilities/position/core-left";
// @use "utilities/position/core-right";
// @use "utilities/position/core-top";
// @use "utilities/position/core-z-index";
// @use "utilities/position/extension-absolute-center";


// // CORE - MARGIN (7)
// @use "utilities/margin/core-margin";
// @use "utilities/margin/extension-margin-x";
// @use "utilities/margin/extension-margin-y";
// @use "utilities/margin/core-margin-bottom";
// @use "utilities/margin/core-margin-left";
// @use "utilities/margin/core-margin-right";
// @use "utilities/margin/core-margin-top";


// // CORE - PADDING (7)
// @use "utilities/padding/core-padding";
// @use "utilities/padding/extension-padding-x";
// @use "utilities/padding/extension-padding-y";
// @use "utilities/padding/core-padding-bottom";
// @use "utilities/padding/core-padding-left";
// @use "utilities/padding/core-padding-right";
// @use "utilities/padding/core-padding-top";


// // CORE - TYPOGRAPHY (14)
// @use "utilities/typography/core-color";
// @use "utilities/typography/core-font-family";
// @use "utilities/typography/core-font-size";
// @use "utilities/typography/core-font-style";
// @use "utilities/typography/core-font-weight";
// @use "utilities/typography/core-letter-spacing";
// @use "utilities/typography/core-line-height";
// @use "utilities/typography/core-list-style-position";
// @use "utilities/typography/core-list-style-type";
// @use "utilities/typography/core-text-decoration";
// @use "utilities/typography/core-text-overflow";
// @use "utilities/typography/core-text-transform";
// @use "utilities/typography/core-white-space";
// @use "utilities/typography/core-word-break";


// // CORE - GRID (9)
// @use "utilities/grid/core-grid-auto-flow";
// @use "utilities/grid/core-grid-column";
// @use "utilities/grid/core-grid-column-end";
// @use "utilities/grid/core-grid-column-start";
// @use "utilities/grid/core-grid-row";
// @use "utilities/grid/core-grid-row-end";
// @use "utilities/grid/core-grid-row-start";
// @use "utilities/grid/core-grid-template-columns";
// @use "utilities/grid/core-grid-template-rows";


// // CORE - FLEXBOX (6)
// @use "utilities/flexbox/core-flex";
// @use "utilities/flexbox/core-flex-direction";
// @use "utilities/flexbox/core-flex-grow";
// @use "utilities/flexbox/core-flex-shrink";
// @use "utilities/flexbox/core-flex-wrap";
// @use "utilities/flexbox/core-order";


// // CORE - GAP (3)
// @use "utilities/gap/core-gap";
// @use "utilities/gap/core-column-gap";
// @use "utilities/gap/core-row-gap";


// // CORE - MULTI-COLUMN (6)
// @use "utilities/multi-column/core-column-count";
// @use "utilities/multi-column/core-column-fill";
// @use "utilities/multi-column/core-column-rule-color";
// @use "utilities/multi-column/core-column-rule-style";
// @use "utilities/multi-column/core-column-rule-width";
// @use "utilities/multi-column/core-column-span";


// // CORE - TRANSFORM (9)
// @use "utilities/transform/core-transform";
// @use "utilities/transform/core-transform-origin";
// @use "utilities/transform/extension-translate-x";
// @use "utilities/transform/extension-translate-y";
// @use "utilities/transform/extension-scale-x";
// @use "utilities/transform/extension-scale-y";
// @use "utilities/transform/extension-skew-x";
// @use "utilities/transform/extension-skew-y";
// @use "utilities/transform/extension-rotate";


// // CORE - TRANSITION (4)
// @use "utilities/transition/core-transition";
// @use "utilities/transition/core-transition-duration";
// @use "utilities/transition/core-transition-delay";
// @use "utilities/transition/core-transition-property";
// @use "utilities/transition/core-transition-timing-function";


// // CORE - INTERACTIVE (5)
// @use "utilities/interactive/core-cursor";
// @use "utilities/interactive/core-pointer-events";
// @use "utilities/interactive/core-resize";
// @use "utilities/interactive/core-scrolling";
// @use "utilities/interactive/core-user-select";


// // CORE - SVG (3)
// @use "utilities/svg/core-fill";
// @use "utilities/svg/core-stroke";
// @use "utilities/svg/core-stroke-width";


// DEFAULTS (2)
// @use "defaults/reset";
// @use "defaults/starter";


// // MODULE (4)
// @use "modules/button";
// @use "modules/form";
// @use "modules/table";
// @use "modules/wrapper";




// CONSTRUCTOR
// ============================================================

@use "core" as *;

@mixin constructor($config) {
  $important: map.get($config, important);
  $prefix: map.get($config, prefix);
  $delimiter: map.get($config, delimiter);
  $child-delimiter: map.get($config, child-delimiter);
  $pseudo-delimiter: map.get($config, pseudo-delimiter);
  $screen-delimiter: map.get($config, screen-delimiter);
  $variablize: map.get($config, variablize);
  $headless: map.get($config, headless);
  $root: map.get($config, root);
  $debugger: map.get($config, debugger);

  $include-reset-styles: map.get($config, include-reset-styles);
  $include-starter-styles: map.get($config, include-starter-styles);
  $include-wrapper-module: map.get($config, include-wrapper-module);
  $include-table-module: map.get($config, include-table-module);
  $include-button-module: map.get($config, include-button-module);
  $include-form-module: map.get($config, include-form-module);

  $utilities: map.get($config, utilities);
  $excludes: map.get($config, excludes);
  $all-pseudos: map.get($config, pseudos);
  $all-screens: map.get($config, screens);

  @if ($headless == false) {
    @if ($debugger == true) {

      // NON RESPONSIVE
      // loop through utilities
      @each $utility, $utility-value in $utilities {
        $keyword: map.get($utility-value, keyword);
        $responsive: map.get($utility-value, responsive);
        $responsive-pseudos: map.get($utility-value, responsive-pseudos);
        $properties: map.get($utility-value, properties);
        $default-variants: map.get($utility-value, default-variants);
        $variants: map.get($utility-value, variants);

        // Construct standard classes
        @each $default-variant, $default-variant-value in $default-variants {
          @if $default-variant == null {
            .#{$prefix}#{if($keyword == null, null, $keyword)} {
              @each $property in $properties {
                #{$property}: $default-variant-value if($important == true, !important, null);
              }
            }
          } @else {
            .#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant} {
              @each $property in $properties {
                #{$property}: $default-variant-value if($important == true, !important, null);
              }
            }
          }
        }
        @each $variant, $variant-value in $variants {
          @if $variant == null {
            .#{$prefix}#{if($keyword == null, null, $keyword)} {
              @each $property in $properties {
                #{$property}: $variant-value if($important == true, !important, null);
              }
            }
          } @else {
            .#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant} {
              @each $property in $properties {
                #{$property}: $variant-value if($important == true, !important, null);
              }
            }
          }
        }

        // Construct standard pseudo classes
        @each $pseudo, $pseudo-value in $all-pseudos {
          @each $default-variant, $default-variant-value in $default-variants {
            @if $default-variant == null {
              
              @if $pseudo == group-hover {
                .group:hover .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                  @each $property in $properties {
                    #{$property}: $default-variant-value if($important == true, !important, null);
                  }
                }  
              } @else if $pseudo == group-focus {
                .group:focus .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                  @each $property in $properties {
                    #{$property}: $default-variant-value if($important == true, !important, null);
                  }
                }  
              } @else {
                .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)}:#{$pseudo-value} {
                  @each $property in $properties {
                    #{$property}: $default-variant-value if($important == true, !important, null);
                  }
                }
              }

            } @else {
              @if $pseudo == group-hover {
                .group:hover .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant} {
                  @each $property in $properties {
                    #{$property}: $default-variant-value if($important == true, !important, null);
                  }
                }
              } @else if $pseudo == group-focus {
                .group:focus .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant} {
                  @each $property in $properties {
                    #{$property}: $default-variant-value if($important == true, !important, null);
                  }
                } 
              } @else {
                .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant}:#{$pseudo-value} {
                  @each $property in $properties {
                    #{$property}: $default-variant-value if($important == true, !important, null);
                  }
                }
              }
            }
          }
          @each $variant, $variant-value in $variants {
            @if $variant == null {
              
              @if $pseudo == group-hover {
                .group:hover .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                  @each $property in $properties {
                    #{$property}: $variant-value if($important == true, !important, null);
                  }
                }  
              } @else if $pseudo == group-focus {
                .group:focus .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                  @each $property in $properties {
                    #{$property}: $variant-value if($important == true, !important, null);
                  }
                }  
              } @else {
                .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)}:#{$pseudo-value} {
                  @each $property in $properties {
                    #{$property}: $variant-value if($important == true, !important, null);
                  }
                }
              }

            } @else {
              @if $pseudo == group-hover {
                .group:hover .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant} {
                  @each $property in $properties {
                    #{$property}: $variant-value if($important == true, !important, null);
                  }
                }
              } @else if $pseudo == group-focus {
                .group:focus .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant} {
                  @each $property in $properties {
                    #{$property}: $variant-value if($important == true, !important, null);
                  }
                } 
              } @else {
                .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant}:#{$pseudo-value} {
                  @each $property in $properties {
                    #{$property}: $variant-value if($important == true, !important, null);
                  }
                }
              }
            }
          }
        }
      }
      
      // RESPONSIVE
      // loop through screens
      @each $screen, $screen-value in $all-screens {
        @media (min-width: $screen-value) {  
          // loop through utilities
          @each $utility, $utility-value in $utilities {
            $keyword: map.get($utility-value, keyword);
            $responsive: map.get($utility-value, responsive);
            $responsive-pseudos: map.get($utility-value, responsive-pseudos);
            $properties: map.get($utility-value, properties);
            $default-variants: map.get($utility-value, default-variants);
            $variants: map.get($utility-value, variants);

            // Construct responsive classes
            @each $default-variant, $default-variant-value in $default-variants {
              @if $default-variant == null {
                .#{$screen}#{$screen-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                  @each $property in $properties {
                    #{$property}: $default-variant-value if($important == true, !important, null);
                  }
                }
              } @else {
                .#{$screen}#{$screen-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant} {
                  @each $property in $properties {
                    #{$property}: $default-variant-value if($important == true, !important, null);
                  }
                }
              }
            }
            @each $variant, $variant-value in $variants {
              @if $variant == null {
                .#{$screen}#{$screen-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                  @each $property in $properties {
                    #{$property}: $variant-value if($important == true, !important, null);
                  }
                }
              } @else {
                .#{$screen}#{$screen-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant} {
                  @each $property in $properties {
                    #{$property}: $variant-value if($important == true, !important, null);
                  }
                }
              }
            }
            

            // Construct responsive pseudo classes
            @each $pseudo, $pseudo-value in $all-pseudos {
              @each $default-variant, $default-variant-value in $default-variants {
                @if $default-variant == null {
                  
                  @if $pseudo == group-hover {
                    .group:hover .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    }  
                  } @else if $pseudo == group-focus {
                    .group:focus .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    }  
                  } @else {
                    .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)}:#{$pseudo-value} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    }
                  }

                } @else {
                  @if $pseudo == group-hover {
                    .group:hover .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    }
                  } @else if $pseudo == group-focus {
                    .group:focus .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    } 
                  } @else {
                    .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant}:#{$pseudo-value} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    }
                  }
                }
              }
              @each $variant, $variant-value in $variants {
                @if $variant == null {
                  
                  @if $pseudo == group-hover {
                    .group:hover .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }  
                  } @else if $pseudo == group-focus {
                    .group:focus .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }  
                  } @else {
                    .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)}:#{$pseudo-value} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }
                  }

                } @else {
                  @if $pseudo == group-hover {
                    .group:hover .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }
                  } @else if $pseudo == group-focus {
                    .group:focus .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    } 
                  } @else {
                    .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant}:#{$pseudo-value} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

    } @else {

      // NON RESPONSIVE
      // loop through utilities
      @each $utility, $utility-value in $utilities {
        $keyword: map.get($utility-value, keyword);
        $responsive: map.get($utility-value, responsive);
        $responsive-pseudos: map.get($utility-value, responsive-pseudos);
        $properties: map.get($utility-value, properties);
        $default-variants: map.get($utility-value, default-variants);
        $default-pseudos: map.get($utility-value, default-pseudos);
        $variants: map.get($utility-value, variants);
        $pseudos: map.get($utility-value, pseudos);
        
        // check if utility exists in the exclude list
        @if (list.index($excludes, $utility) == null) {
          // Construct standard classes
          @each $default-variant, $default-variant-value in $default-variants {
            @if $default-variant == null {
              .#{$prefix}#{if($keyword == null, null, $keyword)} {
                @each $property in $properties {
                  #{$property}: $default-variant-value if($important == true, !important, null);
                }
              }
            } @else {
              .#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant} {
                @each $property in $properties {
                  #{$property}: $default-variant-value if($important == true, !important, null);
                }
              }
            }
          }
          @each $variant, $variant-value in $variants {
            @if $variant == null {
              .#{$prefix}#{if($keyword == null, null, $keyword)} {
                @each $property in $properties {
                  #{$property}: $variant-value if($important == true, !important, null);
                }
              }
            } @else {
              .#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant} {
                @each $property in $properties {
                  #{$property}: $variant-value if($important == true, !important, null);
                }
              }
            }
          }

          // Construct standard pseudo classes
          @each $default-pseudo in $default-pseudos {
            @if map.has-key($all-pseudos, $default-pseudo) {
              @each $default-variant, $default-variant-value in $default-variants {
                @if $default-variant == null {
                  
                  @if $default-pseudo == group-hover {
                    .group:hover .#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    }  
                  } @else if $default-pseudo == group-focus {
                    .group:focus .#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    }  
                  } @else {
                    .#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)}:#{map.get($all-pseudos, $default-pseudo)} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    }
                  }

                } @else {
                  @if $default-pseudo == group-hover {
                    .group:hover .#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    }
                  } @else if $default-pseudo == group-focus {
                    .group:focus .#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    } 
                  } @else {
                    .#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant}:#{map.get($all-pseudos, $default-pseudo)} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    }
                  }
                }
              }
              @each $variant, $variant-value in $variants {
                @if $variant == null {
                  
                  @if $default-pseudo == group-hover {
                    .group:hover .#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }  
                  } @else if $default-pseudo == group-focus {
                    .group:focus .#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }  
                  } @else {
                    .#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)}:#{map.get($all-pseudos, $default-pseudo)} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }
                  }

                } @else {
                  @if $default-pseudo == group-hover {
                    .group:hover .#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }
                  } @else if $default-pseudo == group-focus {
                    .group:focus .#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    } 
                  } @else {
                    .#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant}:#{map.get($all-pseudos, $default-pseudo)} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }
                  }
                }
              }
            }
          }
          @each $pseudo in $pseudos {
            @if map.has-key($all-pseudos, $pseudo) {
              @each $default-variant, $default-variant-value in $default-variants {
                @if $default-variant == null {
                  
                  @if $pseudo == group-hover {
                    .group:hover .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    }  
                  } @else if $pseudo == group-focus {
                    .group:focus .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    }  
                  } @else {
                    .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)}:#{map.get($all-pseudos, $pseudo)} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    }
                  }

                } @else {
                  @if $pseudo == group-hover {
                    .group:hover .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    }
                  } @else if $pseudo == group-focus {
                    .group:focus .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    } 
                  } @else {
                    .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant}:#{map.get($all-pseudos, $pseudo)} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    }
                  }
                }
              }
              @each $variant, $variant-value in $variants {
                @if $variant == null {
                  
                  @if $pseudo == group-hover {
                    .group:hover .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }  
                  } @else if $pseudo == group-focus {
                    .group:focus .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }  
                  } @else {
                    .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)}:#{map.get($all-pseudos, $pseudo)} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }
                  }

                } @else {
                  @if $pseudo == group-hover {
                    .group:hover .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }
                  } @else if $pseudo == group-focus {
                    .group:focus .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    } 
                  } @else {
                    .#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant}:#{map.get($all-pseudos, $pseudo)} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }
                  }
                }
              }
            }
          }
        } @else {

        }
      }
      
      // RESPONSIVE
      // loop through screens
      @each $screen, $screen-value in $all-screens {
        @media (min-width: $screen-value) {  
          // loop through utilities
          @each $utility, $utility-value in $utilities {
            $keyword: map.get($utility-value, keyword);
            $responsive: map.get($utility-value, responsive);
            $responsive-pseudos: map.get($utility-value, responsive-pseudos);
            $properties: map.get($utility-value, properties);
            $default-variants: map.get($utility-value, default-variants);
            $default-pseudos: map.get($utility-value, default-pseudos);
            $variants: map.get($utility-value, variants);
            $pseudos: map.get($utility-value, pseudos);

            // check if utility exists in the exclude list
            @if (list.index($excludes, $utility) == null) {
              @if $responsive == true {
                
                // Construct responsive classes
                @each $default-variant, $default-variant-value in $default-variants {
                  @if $default-variant == null {
                    .#{$screen}#{$screen-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    }
                  } @else {
                    .#{$screen}#{$screen-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant} {
                      @each $property in $properties {
                        #{$property}: $default-variant-value if($important == true, !important, null);
                      }
                    }
                  }
                }
                @each $variant, $variant-value in $variants {
                  @if $variant == null {
                    .#{$screen}#{$screen-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }
                  } @else {
                    .#{$screen}#{$screen-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant} {
                      @each $property in $properties {
                        #{$property}: $variant-value if($important == true, !important, null);
                      }
                    }
                  }
                }
                

                @if $responsive-pseudos == true {
                  // Construct responsive pseudo classes
                  @each $default-pseudo in $default-pseudos {
                    @if map.has-key($all-pseudos, $default-pseudo) {
                      @each $default-variant, $default-variant-value in $default-variants {
                        @if $default-variant == null {
                          
                          @if $default-pseudo == group-hover {
                            .group:hover .#{$screen}#{$screen-delimiter}#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                              @each $property in $properties {
                                #{$property}: $default-variant-value if($important == true, !important, null);
                              }
                            }  
                          } @else if $default-pseudo == group-focus {
                            .group:focus .#{$screen}#{$screen-delimiter}#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                              @each $property in $properties {
                                #{$property}: $default-variant-value if($important == true, !important, null);
                              }
                            }  
                          } @else {
                            .#{$screen}#{$screen-delimiter}#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)}:#{map.get($all-pseudos, $default-pseudo)} {
                              @each $property in $properties {
                                #{$property}: $default-variant-value if($important == true, !important, null);
                              }
                            }
                          }

                        } @else {
                          @if $default-pseudo == group-hover {
                            .group:hover .#{$screen}#{$screen-delimiter}#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant} {
                              @each $property in $properties {
                                #{$property}: $default-variant-value if($important == true, !important, null);
                              }
                            }
                          } @else if $default-pseudo == group-focus {
                            .group:focus .#{$screen}#{$screen-delimiter}#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant} {
                              @each $property in $properties {
                                #{$property}: $default-variant-value if($important == true, !important, null);
                              }
                            } 
                          } @else {
                            .#{$screen}#{$screen-delimiter}#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant}:#{map.get($all-pseudos, $default-pseudo)} {
                              @each $property in $properties {
                                #{$property}: $default-variant-value if($important == true, !important, null);
                              }
                            }
                          }
                        }
                      }
                      @each $variant, $variant-value in $variants {
                        @if $variant == null {
                          
                          @if $default-pseudo == group-hover {
                            .group:hover .#{$screen}#{$screen-delimiter}#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                              @each $property in $properties {
                                #{$property}: $variant-value if($important == true, !important, null);
                              }
                            }  
                          } @else if $default-pseudo == group-focus {
                            .group:focus .#{$screen}#{$screen-delimiter}#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                              @each $property in $properties {
                                #{$property}: $variant-value if($important == true, !important, null);
                              }
                            }  
                          } @else {
                            .#{$screen}#{$screen-delimiter}#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)}:#{map.get($all-pseudos, $default-pseudo)} {
                              @each $property in $properties {
                                #{$property}: $variant-value if($important == true, !important, null);
                              }
                            }
                          }

                        } @else {
                          @if $default-pseudo == group-hover {
                            .group:hover .#{$screen}#{$screen-delimiter}#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant} {
                              @each $property in $properties {
                                #{$property}: $variant-value if($important == true, !important, null);
                              }
                            }
                          } @else if $default-pseudo == group-focus {
                            .group:focus .#{$screen}#{$screen-delimiter}#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant} {
                              @each $property in $properties {
                                #{$property}: $variant-value if($important == true, !important, null);
                              }
                            } 
                          } @else {
                            .#{$screen}#{$screen-delimiter}#{$default-pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant}:#{map.get($all-pseudos, $default-pseudo)} {
                              @each $property in $properties {
                                #{$property}: $variant-value if($important == true, !important, null);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  @each $pseudo in $pseudos {
                    @if map.has-key($all-pseudos, $pseudo) {
                      @each $default-variant, $default-variant-value in $default-variants {
                        @if $default-variant == null {
                          
                          @if $pseudo == group-hover {
                            .group:hover .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                              @each $property in $properties {
                                #{$property}: $default-variant-value if($important == true, !important, null);
                              }
                            }  
                          } @else if $pseudo == group-focus {
                            .group:focus .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                              @each $property in $properties {
                                #{$property}: $default-variant-value if($important == true, !important, null);
                              }
                            }  
                          } @else {
                            .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)}:#{map.get($all-pseudos, $pseudo)} {
                              @each $property in $properties {
                                #{$property}: $default-variant-value if($important == true, !important, null);
                              }
                            }
                          }

                        } @else {
                          @if $pseudo == group-hover {
                            .group:hover .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant} {
                              @each $property in $properties {
                                #{$property}: $default-variant-value if($important == true, !important, null);
                              }
                            }
                          } @else if $pseudo == group-focus {
                            .group:focus .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant} {
                              @each $property in $properties {
                                #{$property}: $default-variant-value if($important == true, !important, null);
                              }
                            } 
                          } @else {
                            .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $default-variant}:#{map.get($all-pseudos, $pseudo)} {
                              @each $property in $properties {
                                #{$property}: $default-variant-value if($important == true, !important, null);
                              }
                            }
                          }
                        }
                      }
                      @each $variant, $variant-value in $variants {
                        @if $variant == null {
                          
                          @if $pseudo == group-hover {
                            .group:hover .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                              @each $property in $properties {
                                #{$property}: $variant-value if($important == true, !important, null);
                              }
                            }  
                          } @else if $pseudo == group-focus {
                            .group:focus .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)} {
                              @each $property in $properties {
                                #{$property}: $variant-value if($important == true, !important, null);
                              }
                            }  
                          } @else {
                            .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword)}:#{map.get($all-pseudos, $pseudo)} {
                              @each $property in $properties {
                                #{$property}: $variant-value if($important == true, !important, null);
                              }
                            }
                          }

                        } @else {
                          @if $pseudo == group-hover {
                            .group:hover .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant} {
                              @each $property in $properties {
                                #{$property}: $variant-value if($important == true, !important, null);
                              }
                            }
                          } @else if $pseudo == group-focus {
                            .group:focus .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant} {
                              @each $property in $properties {
                                #{$property}: $variant-value if($important == true, !important, null);
                              }
                            } 
                          } @else {
                            .#{$screen}#{$screen-delimiter}#{$pseudo}#{$pseudo-delimiter}#{$prefix}#{if($keyword == null, null, $keyword + $delimiter)}#{'' + $variant}:#{map.get($all-pseudos, $pseudo)} {
                              @each $property in $properties {
                                #{$property}: $variant-value if($important == true, !important, null);
                              }
                            }
                          }
                        }
                      }
                    }
                  }

                }
              }
            } @else {

            }
          }
        }
      }


    }
  }
}

@include constructor($config);